{"version":3,"file":"deGaulle.js","sources":["../js/src/index.js"],"sourcesContent":["//\n//\n//\nimport nomnom from '@gerhobbelt/nomnom';\nimport slug from '@gerhobbelt/slug';\nimport MarkDown from '@gerhobbelt/markdown-it';\nimport mdPluginCollective from 'markdown-it-dirty-dozen';\nimport { fileURLToPath } from 'url';\n// see https://nodejs.org/docs/latest-v13.x/api/esm.html#esm_no_require_exports_module_exports_filename_dirname\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\nconst pkg = JSON.parse(fs.readFileSync(path.normalize(path.join(__dirname, '../package.json')), 'utf8'));\nimport jsdom from 'jsdom';\nconst { JSDOM } = jsdom;\nimport glob from '@gerhobbelt/glob';\nimport assert from 'assert';\nimport _ from 'lodash';\nimport path from 'path';\nimport fs from 'fs';\nlet DEBUG = 1;\nconst markdownTokens = {};\nconst config = {\n  docTreeBasedir: null,\n  destinationPath: null,\n  outputDirRelativePath: null\n};\nexport default function main() {\n  nomnom.script('deGaulle');\n  nomnom\n        .command('build')\n        .option('debug', {\n          abbr: 'd',\n          flag: false,\n          'default': 0,\n          help: 'Print debugging info'\n        })\n        .option('config', {\n          abbr: 'c',\n          'default': 'config.js',\n          help: 'JS script file with custom handlers'\n        })\n        .option('output', {\n          abbr: 'o',\n          flag: false,\n          help: 'directory to write results to'\n        })\n        .callback(function (opts, cmd) {\n          try {\n            buildWebsite(opts, cmd);\n          } catch (ex) {\n            console.error(`ERROR: ${ex.message}\\n\\nException:\\n${ex}`);\n            process.exit(5);\n          }\n        })\n        .help('build website from sources');\n  nomnom\n        .command('sanity')\n        .option('debug', {\n          abbr: 'd',\n          flag: false,\n          help: 'Print debugging info'\n        })\n        .option('config', {\n          abbr: 'c',\n          'default': 'config.js',\n          help: 'JS script file with custom handlers'\n        })\n        .option('outfile', {\n          abbr: 'o',\n          help: 'file to write results to'\n        })\n        .callback(function (opts, cmd) {\n          try {\n            sanityCheck(opts, cmd);\n          } catch (ex) {\n            console.error(`ERROR: ${ex.message}\\n\\nException:\\n${ex}`);\n            process.exit(5);\n          }\n        })\n        .help('run the sanity tests');\n  nomnom\n        .nocommand()\n        .option('debug', {\n          abbr: 'd',\n          flag: false,\n          'default': 0,\n          help: 'Print debugging info'\n        })\n        .option('config', {\n          abbr: 'c',\n          'default': 'config.js',\n          help: 'JS script file with custom drivers'\n        })\n        .option('version', {\n          flag: true,\n          help: 'print version and exit',\n          callback: function () {\n            return `version ${pkg.version}`;\n          }\n        })\n        .callback(function (opts, cmd) {\n          try {\n            buildWebsite(opts, cmd);\n          } catch (ex) {\n            console.error(`ERROR: ${ex.message}\\n\\nException:\\n${ex}`);\n            process.exit(5);\n          }\n        });\n  nomnom.parse();\n}\n// -- done --\nfunction unixify(path) {\n  return path.replace(/\\\\/g, '/');\n}\nfunction absSrcPath(rel) {\n  const p = path.join(config.docTreeBasedir, rel);\n  return unixify(path.resolve(p));\n}\nfunction absDstPath(rel) {\n  if (!config.destinationPath) {\n    throw new Error('Internal error: used too early');\n  }\n  const p = path.join(config.destinationPath, rel);\n  return unixify(path.resolve(p));\n}\nconst SANE_MAX_STRING_LENGTH = 2 * 120;\nfunction limitDebugOutput(str) {\n  if (str && str.length > SANE_MAX_STRING_LENGTH) {\n    str = `${str.slice(0, SANE_MAX_STRING_LENGTH - 20)}...\\n  ... (length: ${str.length})`;\n  }\n  return str;\n}\nfunction limitDebugOutput4Map(collection) {\n  if (collection instanceof Map) {\n    const rv = new Map();\n    collection.forEach((value, key) => {\n      rv.set(key, showRec(value));\n    });\n    return rv;\n  }\n  return collection;\n}\nfunction limitDebugOutput4Collection(allFiles) {\n  if (allFiles) {\n    const rv = {};\n    for (const type in allFiles) {\n      const m = allFiles[type];\n      rv[type] = limitDebugOutput4Map(m);\n    }\n    return rv;\n  }\n  return allFiles;\n}\nfunction showRec(rec) {\n  if (rec) {\n    const rv = Object.assign({}, rec);\n    for (const key in rv) {\n      const attr = rv[key];\n      if (typeof attr === 'string' && attr.length > SANE_MAX_STRING_LENGTH) {\n        rv[key] = limitDebugOutput(attr);\n      }\n    }\n    return rv;\n  }\n  return rec;\n}\nfunction slugify4Path(filePath) {\n  return slug(filePath, {\n    mode: 'path'\n  });\n}\nfunction slugify4TitleId(title) {\n  return slug(title, {\n    mode: 'pretty' // or should we use uslug?\n  });\n}\nfunction slugify4FileName(filePath, maxLength = 64) {\n  const hash = cyrb53hash(filePath);\n  const hashStr = hash.toString(16);\n  const basename = path.basename(filePath) + path.extname(filePath);\n  const nameslug = slug(basename, {\n    mode: 'path'\n  });\n  const dir = path.dirname(filePath);\n  const dirslug = slug(dir, {\n    mode: 'path'\n  });\n  const dirWords = dirslug.split('-');\n  const nameWords = nameslug.split('-');\n  let n = maxLength - hashStr.length;\n  const w = [];\n  let i = 0;\n  while (n >= 1 + nameWords[i].length && i < nameWords.length) {\n    n -= 1 + nameWords[i].length;\n    w.push(nameWords[i++]);\n  }\n  w.push(hashStr);\n  i = dirWords.length - 1;\n  while (n >= 1 + dirWords[i].length && i >= 0) {\n    n -= 1 + dirWords[i].length;\n    w.unshift(dirWords[i--]);\n  }\n  const sl = w.join('-');\n  return sl;\n}\n// CYRB53 hash (NOT a secure hash)\n// as per https://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript/52171480#52171480\n// (re `number` type: see https://spin.atomicobject.com/2018/11/05/using-an-int-type-in-typescript/ - deemed too much cost & effort right now)\nfunction cyrb53hash(str, seed = 0) {\n  let h1 = 0xdeadbeef ^ seed, h2 = 0x41c6ce57 ^ seed;\n  for (let i = 0, ch; i < str.length; i++) {\n    ch = str.charCodeAt(i);\n    h1 = Math.imul(h1 ^ ch, 2654435761);\n    h2 = Math.imul(h2 ^ ch, 1597334677);\n  }\n  h1 = Math.imul(h1 ^ (h1 >>> 16), 2246822507) ^ Math.imul(h2 ^ (h2 >>> 13), 3266489909);\n  h2 = Math.imul(h2 ^ (h2 >>> 16), 2246822507) ^ Math.imul(h1 ^ (h1 >>> 13), 3266489909);\n  return 4294967296 * (2097151 & h2) + (h1 >>> 0);\n}\nfunction readOptionalTxtConfigFile(rel) {\n  const p = absSrcPath(rel);\n  if (fs.existsSync(p)) {\n    const src = fs.readFileSync(p, 'utf8');\n        // - split into lines\n        // - filter out any lines which don't have an '='\n        // - split each line across the initial '=' in there.\n        // - turn this into a hash table?\n    const lines = src.split(/[\\r\\n]/g);\n    const linesarr = lines.filter((l) => l.trim().length > 1 && l.includes('=')).map((l) => {\n      let parts = l.split('=');\n      if (parts.length !== 2) {\n        throw new Error(`config line in ${rel} is expected to have only one '='`);\n      }\n      parts = parts.map((l) => l.trim());\n      return parts;\n    });\n    const rv = {};\n    linesarr.forEach((l) => {\n      rv[l[0]] = l[1];\n    });\n    return rv;\n  }\n  return {};\n}\nfunction myCustomPageNamePostprocessor(spec) {\n    // clean up unwanted characters\n  spec = spec.replace(/ :: /g, '/');\n  spec = spec.replace(/ --* /g, '/');\n  spec = _.deburr(spec).trim();\n    // // normalize case\n    //spec = spec.toLowerCase();\n  spec = spec\n        .replace(/[^\\w\\d\\s\\/_-]/g, '_');\n  spec = spec\n        .replace(/__+/g, '_');\n  spec = spec\n        .replace(/\\s+/g, ' ');\n  if (DEBUG >= 7) { console.log('myCustomPageNamePostprocessor STAGE 1', spec); }\n  spec = spec\n        .replace(/_-_/g, '_');\n  spec = spec\n        .replace(/ - /g, ' ');\n  spec = spec\n        .replace(/[ _]* [ _]*/g, ' ');\n  if (DEBUG >= 7) { console.log('myCustomPageNamePostprocessor STAGE 2', spec); }\n  spec = spec\n        .replace(/(^|\\/)[ _]+/g, '$1');\n  spec = spec\n        .replace(/[ _]+($|\\/)/g, '$1');\n  if (DEBUG >= 7) { console.log('myCustomPageNamePostprocessor STAGE 3', spec); }\n  spec = spec\n        .replace(/ /g, '_');\n  if (DEBUG >= 7) { console.log('myCustomPageNamePostprocessor STAGE 4', spec); }\n  return spec;\n}\nasync function loadConfigScript(configScript) {\n  if (configScript) {\n        // https://stackoverflow.com/questions/42453683/how-to-reject-in-async-await-syntax\n    if (DEBUG >= 1) { console.log(`loadConfigScript(${configScript})`); }\n    if (!path.isAbsolute(configScript)) {\n            // make sure `import` sees a './'-based relative path, or it barf a hairball as it will treat the base directory as a package identifier instead!\n      configScript = unixify(path.join(process.cwd(), configScript));\n    }\n    if (DEBUG >= 1) { console.log(`loadConfigScript(prepped: '${configScript}')`); }\n    try {\n      const processors = await import('file://' + configScript);\n      return processors;\n    } catch (err) {\n      console.error('######## ERROR: ', err);\n            //throw new AggregateError([ err ], `Cannot open/load config script file '${configScript}'`);\n      throw new Error(`Cannot open/load config script file '${configScript}'. Error: ${err}`);\n    }\n  } else {\n    return new Promise((resolve, reject) => {\n      const processors = {};\n      resolve(processors);\n    });\n  }\n}\nasync function sanityCheck(opts, command) {\n  console.log(`sanityCheck: command: ${command || '<no-command>'}, opts: ${JSON.stringify(opts, null, 2)}`);\n  DEBUG = Math.max(DEBUG, Number.isFinite(+opts.debug) ? +opts.debug : opts.debug ? 1 : 0);\n  console.log('DEBUG = ', DEBUG);\n  return new Promise((resolve, reject) => {\n    resolve(0);\n  });\n}\nasync function buildWebsite(opts, command) {\n  console.log(`buildWebsite: command: ${command || '<no-command>'}, opts: ${JSON.stringify(opts, null, 2)}`);\n  DEBUG = Math.max(DEBUG, Number.isFinite(+opts.debug) ? +opts.debug : opts.debug ? 1 : 0);\n  console.log('DEBUG = ', DEBUG);\n  const paths = opts._.slice(command ? 1 : 0);\n  const minPathsCount = 1;\n  if (!paths || paths.length < minPathsCount) {\n    throw new Error('Must specify at least one file path as starting point. None were specified.');\n  }\n    // load the config script, iff it exists:\n  const configScript = opts.config;\n  let processors = null;\n  try {\n    processors = await loadConfigScript(configScript);\n  } catch (err) {\n    console.error('##### ERROR while importing config script. (Will continue with a default script.)\\nError: ', err);\n    processors = await loadConfigScript(null);\n  }\n  let firstEntryPointPath = paths[0];\n    // make sure we start with an absolute path; everything will derived off this one.\n  if (!path.isAbsolute(firstEntryPointPath)) {\n    firstEntryPointPath = path.join(process.cwd(), firstEntryPointPath);\n  }\n  firstEntryPointPath = unixify(path.normalize(firstEntryPointPath));\n  if (DEBUG >= 1) { console.log('firstEntryPointPath = ', firstEntryPointPath); }\n  let entryStats = fs.lstatSync(firstEntryPointPath);\n  if (entryStats && entryStats.isDirectory()) {\n        // check if any of the default entry points exist:\n        // - index.md\n        // - index.html\n        // - README.md\n    let indexFile;\n    let indexFilePriority = 0;\n    let scanPath = path.join(firstEntryPointPath, '*.{md,htm,html}');\n    scanPath = unixify(scanPath);\n    if (DEBUG >= 1) { console.log('scanPath:', scanPath); }\n    const files = glob.sync(scanPath, {\n      nosort: true,\n      nomount: true,\n      nounique: false,\n      nocase: true,\n      nodir: true,\n      nobrace: false,\n      gitignore: true\n    });\n    if (DEBUG >= 3) { console.log(`root point DIR --> scan: ${JSON.stringify(files, null, 2)}`); }\n    const filelist = files || [];\n    for (const f of filelist) {\n      if (DEBUG >= 10) { console.log('Loop!', { f }); }\n      const basename = path.basename(f.toLowerCase());\n      if (DEBUG >= 7) { console.log('Can this serve as root?', basename); }\n      switch (basename) {\n      case 'index.md':\n        if (indexFilePriority < 10) {\n          indexFilePriority = 10;\n          indexFile = f;\n        }\n        break;\n      case 'index.htm':\n      case 'index.html':\n        if (indexFilePriority < 5) {\n          indexFilePriority = 5;\n          indexFile = f;\n        }\n        break;\n      case 'readme.md':\n        if (DEBUG >= 7) { console.log('Hit!', basename); }\n        if (indexFilePriority < 1) {\n          indexFilePriority = 1;\n          indexFile = f;\n        }\n        if (DEBUG >= 7) { console.log('Continue!', indexFile); }\n        break;\n      default:\n        if (DEBUG >= 1) { console.log('WUT?!', basename); }\n        break;\n      }\n    }\n    if (DEBUG >= 10) { console.log('Loop end!', indexFile); }\n    if (DEBUG >= 3) { console.log('root scan -> indexFile', indexFile); }\n    if (indexFile) {\n      firstEntryPointPath = unixify(path.resolve(indexFile));\n      if (DEBUG >= 1) { console.log('root scan -> firstEntryPointPath', firstEntryPointPath); }\n      entryStats = fs.lstatSync(firstEntryPointPath);\n    } else {\n      throw new Error(`Could not find a default entry point file (index.md, index.html or README.md) in the entry point directory ${firstEntryPointPath} (${scanPath})`);\n    }\n  }\n  if (!entryStats) {\n    throw new Error(`entry point does not exist: ${firstEntryPointPath}`);\n  }\n  if (!entryStats.isFile()) {\n    throw new Error(`entry point is not a file: ${firstEntryPointPath}`);\n  }\n  config.docTreeBasedir = path.dirname(firstEntryPointPath);\n  let outputDirPath = paths[1] || path.join(config.docTreeBasedir, (!config.docTreeBasedir.endsWith('docs') ? '../docs' : '../' + path.basename(config.docTreeBasedir) + '-output'));\n    // make sure we start with an absolute path; everything will derived off this one.\n  if (!path.isAbsolute(outputDirPath)) {\n    outputDirPath = path.join(process.cwd(), outputDirPath);\n  }\n  outputDirPath = unixify(path.normalize(outputDirPath));\n  if (DEBUG >= 1) { console.log('outputDirPath = ', outputDirPath); }\n  config.destinationPath = outputDirPath;\n  config.outputDirRelativePath = unixify(path.relative(config.docTreeBasedir, config.destinationPath));\n  if (DEBUG >= 2) { console.log('config:', config); }\n  const rv_mapping_def = {\n    markdown: [\n      'md',\n      'markdown'\n    ],\n    html: [\n      'html',\n      'htm'\n    ],\n    js: [\n      'js',\n      'mjs',\n      'ejs',\n      'cjs',\n      'ts',\n      'coffee'\n    ],\n    css: [\n      'css',\n      'scss',\n      'less',\n      'styl',\n      'stylus'\n    ],\n    image: [\n      'png',\n      'gif',\n      'jpg',\n      'jpeg',\n      'tiff',\n      'bmp',\n      'svg',\n      'psd',\n      'ai',\n      'webp'\n    ],\n    movie: [\n      'mkv',\n      'mp4',\n      'avi',\n      'mov',\n      'flv',\n      'webm'\n    ],\n    archive: [\n      'zip',\n      'rar',\n      'gz',\n      'bz2',\n      '7z'\n    ],\n    distro: [\n      'exe',\n      'msi'\n    ]\n  };\n  const rv_mapping_bin_content = {\n    png: true,\n    gif: true,\n    jpg: true,\n    jpeg: true,\n    tiff: true,\n    bmp: true,\n    svg: false,\n    psd: true,\n    ai: true,\n    mkv: true,\n    mp4: true,\n    avi: true,\n    mov: true,\n    flv: true,\n    webm: true,\n    webp: true,\n    zip: true,\n    rar: true,\n    gz: true,\n    bz2: true,\n    '7z': true,\n    exe: true,\n    msi: true\n  };\n  const rv_mapping = new Map();\n  for (const n in rv_mapping_def) {\n    const a = rv_mapping_def[n];\n    if (DEBUG >= 4) { console.log('key n', { n, a }); }\n    for (const b of a) {\n      if (DEBUG >= 4) { console.log('map n -> b', { n, b }); }\n      rv_mapping.set('.' + b, n);\n    }\n  }\n  if (DEBUG >= 3) { console.log('######################### mapping ##########################\\n', rv_mapping, '\\n###########################################'); }\n    // now scan the entire tree: collect potential files for comparison & treatment\n    //\n    // Produces an array of categories, which each are an array of file records,\n    // where each file record has this format:\n    //\n    // {\n    //   path,        -- full path to file\n    //   nameLC       -- lowercased filename\n    //   ext          -- lowercased filename extension\n    //   relativePath --  relative path to config.docTreeBasedir\n    // }\n    //\n  async function collectAllFiles() {\n    let scanPath = path.join(config.docTreeBasedir, '**/*');\n    scanPath = unixify(scanPath);\n    if (DEBUG >= 1) { console.log('scanPath:', scanPath); }\n    return new Promise((resolve, reject) => {\n      glob(scanPath, {\n        nosort: true,\n        nomount: true,\n        nounique: false,\n        nocase: true,\n        nodir: true,\n        nobrace: false,\n        gitignore: true\n      }, function processGlobResults(err, files) {\n        if (err) {\n          reject(new Error(`glob scan error: ${err}`));\n          return;\n        }\n        if (DEBUG >= 1) { console.log(`root point DIR --> scan: ${JSON.stringify(files, null, 2)}`); }\n        const rv = {\n          markdown: new Map(),\n          html: new Map(),\n          css: new Map(),\n          js: new Map(),\n          image: new Map(),\n          movie: new Map(),\n          archive: new Map(),\n          distro: new Map(),\n          misc: new Map(),\n          _: new Map()\n        };\n        for (const p of files || []) {\n          AddFileToCollection(p, rv);\n        }\n        resolve(rv);\n      });\n    });\n  }\n  function AddFileToCollection(p, collection) {\n    const f = unixify(path.resolve(p));\n    if (DEBUG >= 9) { console.log('hacky fix for glob output not being abs path on Windows:', { 'in': p, out: f }); }\n    const fname = path.basename(f);\n        // check if the file is to be ignored:\n    let ignore = false;\n    [ 'CNAME', '.nojekyll', /\\.vcxproj/, /^site-builder\\./, /^Makefile$/ ].forEach((f) => {\n      if (typeof f === 'string' && f === fname) {\n        ignore = true;\n      } else if (f instanceof RegExp && f.test(fname)) {\n        ignore = true;\n      }\n    });\n    if (!ignore) {\n      const ext = path.extname(fname).toLowerCase();\n      const el = {\n        path: f,\n        nameLC: fname.toLowerCase(),\n        ext: ext,\n        relativePath: unixify(path.relative(config.docTreeBasedir, f)),\n        destinationRelPath: null,\n        RawContent: null,\n        contentIsBinary: rv_mapping_bin_content[ext] || false\n      };\n      const cat = rv_mapping.get(ext) || 'misc';\n      collection[cat].set(f, el);\n      collection._.set(f, el);\n    } else {\n      console.log(`INFO: Ignoring file '${f}'.`);\n    }\n  }\n    // async invocation, but don't wait for it yet:\n  const scan = collectAllFiles();\n  const md = MarkDown({\n        // Enable HTML tags in source\n    html: true,\n        // Use '/' to close single tags (<br />).\n    xhtmlOut: false,\n        // Convert '\\n' in paragraphs into <br>\n    breaks: false,\n        // CSS language prefix for fenced blocks. Can be useful for external highlighters.\n    langPrefix: 'language-',\n        // Autoconvert URL-like text to links\n    linkify: true,\n        // highSecurity:\n        // - false:           lower protection against XSS/Unicode-Homologue/etc. attacks via the input MarkDown.\n        //                    This setting assumes you own or at least trust the Markdown\n        //                    being fed to MarkDonw-It. The result is a nicer render.\n        // - true (default):  maximum protection against XSS/Unicode-Homologue/etc. attacks via the input MarkDown.\n        //                    This is the default setting and assumes you have no control or absolute trust in the Markdown\n        //                    being fed to MarkDonw-It. Use this setting when using markdown-it as part of a forum or other\n        //                    website where more-or-less arbitrary users can enter and feed any MarkDown to markdown-it.\n        //\n        // See https://en.wikipedia.org/wiki/Internationalized_domain_name for details on homograph attacks, for example.\n    highSecurity: false,\n        // Enable some language-neutral replacement + quotes beautification\n    typographer: true,\n        // Double + single quotes replacement pairs, when typographer enabled,\n        // and smartquotes on. Could be either a String or an Array.\n        //\n        // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n        // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '“”‘’',\n        // Highlighter function. Should return escaped HTML,\n        // or '' if the source string is not changed and should be escaped externally.\n        // If result starts with <pre... internal wrapper is skipped.\n    highlight: function () {\n      console.error('highligh callback invoked!');\n      return '';\n    } // Configure default attributes for given tags\n        //default_attributes: { a: [['rel', 'nofollow']] }\n  });\n    // augment the md instance for use with the markdown_it_include plugin:\n    //md.getIncludeRootDir = ...\n  if (DEBUG >= 2) { console.log('setting up markdown-it:', mdPluginCollective, typeof mdPluginCollective.use_dirty_dozen); }\n  mdPluginCollective.use_dirty_dozen(md, {\n    abbr: {\n      abbreviations: readOptionalTxtConfigFile('.deGaulle/abbr-abbreviations.txt'),\n      links: readOptionalTxtConfigFile('.deGaulle/abbr-links.txt'),\n      emphasis: readOptionalTxtConfigFile('.deGaulle/abbr-emphasis-phrases.txt')\n    },\n    include: {\n      root: '/includes/',\n      getRootDir: (options, state, startLine, endLine) => state.env.getIncludeRootDir(options, state, startLine, endLine)\n    },\n    wikilinks: {\n      postProcessPageName: function (pageName) {\n        const rv = myCustomPageNamePostprocessor(pageName);\n        if (DEBUG >= 2) { console.log('wikilink transform:', { 'in': pageName, out: rv }); }\n        return rv;\n      }\n    }\n  });\n  const allFiles = await scan;\n  if (DEBUG >= 4) { console.log('!!!!!!!!!!!!!!!! allFiles:', limitDebugOutput4Collection(allFiles)); }\n  if (!allFiles.markdown.get(firstEntryPointPath) && !allFiles.html.get(firstEntryPointPath)) {\n    throw new Error(`root file '${firstEntryPointPath}' is supposed to be part of the website`);\n  }\n  if (0) {\n    console.log(`processing root file: ${firstEntryPointPath}...`);\n    const specRec = await compileMD(firstEntryPointPath, md, allFiles);\n    if (DEBUG >= 10) { console.log('specRec:', showRec(specRec)); }\n  }\n  console.log('processing/loading site files...');\n    // now process the HTML, MD, CSS, JS and other 'fixed assets' files:\n    //\n    // [css, js, image, movie, misc, _]\n  for (const type in allFiles) {\n    switch (type) {\n    case '_':\n      continue;\n    case 'markdown':\n      {\n        const collection = allFiles[type];\n        for (const slot of collection) {\n          const key = slot[0];\n          const entry = slot[1];\n                        // as these pages will be rendered to HTML, they'll receive the html extension:\n          entry.destinationRelPath = myCustomPageNamePostprocessor(entry.relativePath.slice(0, entry.relativePath.length - entry.ext.length)) + '.html';\n          if (DEBUG >= 5) { console.log('!!!!!!!!!!!!!!!!!!!!!!!! markdown file record:', showRec(entry)); }\n          const specRec2 = await compileMD(key, md, allFiles);\n          if (DEBUG >= 3) { console.log('specRec:', showRec(specRec2)); }\n          assert.strictEqual(specRec2, entry);\n        }\n      }\n      continue;\n    case 'html':\n      {\n        const collection = allFiles[type];\n        for (const slot of collection) {\n          const key = slot[0];\n          const entry = slot[1];\n                        // It doesn't matter whether these started out as .htm or .html files: we output them as .html files anyway:\n          entry.destinationRelPath = myCustomPageNamePostprocessor(entry.relativePath.slice(0, entry.relativePath.length - entry.ext.length)) + '.html';\n          if (DEBUG >= 5) { console.log('!!!!!!!!!!!!!!!!!!!!!!!! HTML file record:', showRec(entry)); }\n          const specRec2 = await loadHTML(key, allFiles);\n          if (DEBUG >= 3) { console.log('specRec:', showRec(specRec2)); }\n          assert.strictEqual(specRec2, entry);\n        }\n      }\n      continue;\n    case 'css':\n    case 'js':\n      {\n        const collection = allFiles[type];\n        for (const slot of collection) {\n          const key = slot[0];\n          const entry = slot[1];\n          entry.destinationRelPath = myCustomPageNamePostprocessor(entry.relativePath.slice(0, entry.relativePath.length - entry.ext.length)) + entry.ext;\n          if (DEBUG >= 5) { console.log(`!!!!!!!!!!!!!!!!!!!!!!!! Type [${type}] file record:`, showRec(entry)); }\n          const specRec2 = await loadFixedAssetTextFile(key, allFiles, collection);\n          if (DEBUG >= 3) { console.log('specRec:', showRec(specRec2)); }\n          assert.strictEqual(specRec2, entry);\n        }\n      }\n      continue;\n    default:\n      {\n        const collection = allFiles[type];\n        for (const slot of collection) {\n          const key = slot[0];\n          const entry = slot[1];\n          entry.destinationRelPath = myCustomPageNamePostprocessor(entry.relativePath.slice(0, entry.relativePath.length - entry.ext.length)) + entry.ext;\n          if (DEBUG >= 5) { console.log(`!!!!!!!!!!!!!!!!!!!!!!!! Type [${type}] file record:`, showRec(entry)); }\n          const specRec2 = await loadFixedAssetBinaryFile(key, allFiles, collection);\n          if (DEBUG >= 3) { console.log('specRec:', showRec(specRec2)); }\n          assert.strictEqual(specRec2, entry);\n        }\n      }\n      continue;\n    }\n  }\n    // now's the time to match the links in the generated content and do some linkage reporting alongside:\n    //\n  if (DEBUG >= 2) { console.log('>>>>>>>>>>>>>>>>>>>> allFiles:', limitDebugOutput4Collection(allFiles)); }\n  if (DEBUG >= 1) { console.log('markdown AST token types:', Object.keys(markdownTokens).sort()); }\n  console.log('tracing site files...');\n    // now trace the access graph:\n    //\n    // [css, js, image, movie, misc, _]\n  for (const type in allFiles) {\n    switch (type) {\n    case '_':\n      continue;\n    case 'markdown':\n      {\n        const collection = allFiles[type];\n        for (const slot of collection) {\n          const key = slot[0];\n          const entry = slot[1];\n                        //entry.destinationRelPath\n        }\n      }\n      continue;\n    case 'html':\n      {\n        const collection = allFiles[type];\n        for (const slot of collection) {\n          const key = slot[0];\n          const entry = slot[1];\n                        // It doesn't matter whether these started out as .htm or .html files: we output them as .html files anyway:\n                        //entry.destinationRelPath\n        }\n      }\n      continue;\n    case 'css':\n    case 'js':\n      {\n        const collection = allFiles[type];\n        for (const slot of collection) {\n          const key = slot[0];\n          const entry = slot[1];\n                        //entry.destinationRelPath\n        }\n      }\n      continue;\n    default:\n      {\n        const collection = allFiles[type];\n        for (const slot of collection) {\n          const key = slot[0];\n          const entry = slot[1];\n                        //entry.destinationRelPath\n        }\n      }\n      continue;\n    }\n  }\n  console.log('updating/patching site files...');\n    // now patch links, etc. in the HTML, MarkDown, CSS and JS files:\n    //\n    // [css, js, image, movie, misc, _]\n  for (const type in allFiles) {\n    switch (type) {\n    case '_':\n      continue;\n    case 'markdown':\n      {\n        const collection = allFiles[type];\n        for (const slot of collection) {\n          const key = slot[0];\n          const entry = slot[1];\n        }\n      }\n      continue;\n    case 'html':\n      {\n        const collection = allFiles[type];\n        for (const slot of collection) {\n          const key = slot[0];\n          const entry = slot[1];\n        }\n      }\n      continue;\n    case 'css':\n    case 'js':\n      {\n        const collection = allFiles[type];\n        for (const slot of collection) {\n          const key = slot[0];\n          const entry = slot[1];\n        }\n      }\n      continue;\n    default:\n      {\n        const collection = allFiles[type];\n        for (const slot of collection) {\n          const key = slot[0];\n          const entry = slot[1];\n        }\n      }\n      continue;\n    }\n  }\n  console.log('rendering site files\\' content...');\n    // render the HTML, MarkDown, CSS and JS files' content:\n    //\n    // [css, js, image, movie, misc, _]\n  for (const type in allFiles) {\n    switch (type) {\n    case '_':\n      continue;\n    case 'markdown':\n      {\n        const collection = allFiles[type];\n        for (const slot of collection) {\n          const key = slot[0];\n          const entry = slot[1];\n          const specRec2 = await renderMD(key, md, allFiles);\n          if (DEBUG >= 3) { console.log('specRec:', showRec(specRec2)); }\n          assert.strictEqual(specRec2, entry);\n        }\n      }\n      continue;\n    case 'html':\n      {\n        const collection = allFiles[type];\n        for (const slot of collection) {\n          const key = slot[0];\n          const entry = slot[1];\n          const specRec2 = await renderHTML(key, allFiles);\n          if (DEBUG >= 3) { console.log('specRec:', showRec(specRec2)); }\n          assert.strictEqual(specRec2, entry);\n        }\n      }\n      continue;\n    case 'css':\n    case 'js':\n      {\n        const collection = allFiles[type];\n        for (const slot of collection) {\n          const key = slot[0];\n          const entry = slot[1];\n          const specRec2 = await renderFixedAssetTextFile(key, allFiles, collection);\n          if (DEBUG >= 3) { console.log('specRec:', showRec(specRec2)); }\n          assert.strictEqual(specRec2, entry);\n        }\n      }\n      continue;\n    default:\n                // we do not 'render' the binary files, right?\n      continue;\n    }\n  }\n    //\n    // Apply the template? Nah, that must have already happened in the render phase.\n    // If we have special 'generated content only' pages, such as the index page to a catalog site,\n    // that *still* is done through a (possibly empty, except for some metadata perhaps) `index.html`\n    // or README.md or other *content* file: the custom code can decide which bit of the template\n    // collective to apply to each page, so that would then apply a 'overview/index/landing' page\n    // template to such a (hypothetical) page.\n    //\n    // Hence we come to the conclusion now: every page being written is written by a (possibly empty)\n    // content page. If the content page is absent, the page simply is NOT generated.\n    //\n    // Meanwhile, the custom code decides which template file((s) are applied to each content item\n    // in the allFiles list.\n    //\n    // ---\n    //\n    // Yes, this means we'll have content pages for the 404 and other landing pages too. If they are\n    // absent, we do not have those landing pages. Simple as that.\n    //\n    // output the files into the destination directory\n  console.log(`buildWebsite: command: ${command || '<no-command>'}, opts: ${JSON.stringify(opts, null, 2)}`);\n    // now write the CSS, HTML, JS and other files:\n  console.log(`Writing all processed & collected files to the website destination directory '${config.docTreeBasedir}'...`);\n  for (const type in allFiles) {\n    switch (type) {\n    case '_':\n      continue;\n    case 'html':\n    case 'markdown':\n      {\n        const collection = allFiles[type];\n        for (const slot of collection) {\n          const key = slot[0];\n          const entry = slot[1];\n          const destFilePath = unixify(path.join(opts.output, entry.destinationRelPath));\n          if (DEBUG >= 5) { console.log(`!!!!!!!!!!!!!!!!!!!!!!!! Type [${type}] file record: copy '${entry.path}' --> '${destFilePath}'`); }\n          let title = entry.docTitle;\n          if (title && title.trim()) {\n            title = `<title>${title}</title>`;\n          } else {\n            title = '';\n          }\n          const miscHeaderContent = entry.HtmlHeadContent || '';\n          const bodyContent = entry.HtmlContent;\n          const originalPath = entry.relativePath;\n          const content = `\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    ${title}\n    ${miscHeaderContent}\n  </head>\n  <body>\n\n    ${bodyContent}\n\n    <footer>\n      © 2020 Qiqqa Contributors ::\n      <a href=\"https://github.com/GerHobbelt/qiqqa-open-source/blob/docs-src/${originalPath}\">Edit this page on GitHub</a>\n    </footer>\n  </body>\n</html>\n`.trimLeft();\n          const dstDir = unixify(path.dirname(destFilePath));\n          fs.mkdirSync(dstDir, { recursive: true });\n          fs.writeFileSync(destFilePath, content, 'utf8');\n                        //el.HtmlContent = content;\n                        //el.HtmlHeadContent = headEl.innerHTML;\n                        //el.HtmlBody = bodyEl;\n                        //el.HtmlHead = headEl;\n        }\n      }\n      continue;\n    case 'css':\n    case 'js':\n    default:\n      {\n        const collection = allFiles[type];\n        for (const slot of collection) {\n          const key = slot[0];\n          const entry = slot[1];\n          const destFilePath = unixify(path.join(opts.output, entry.destinationRelPath));\n          if (DEBUG >= 5) { console.log(`!!!!!!!!!!!!!!!!!!!!!!!! Type [${type}] file record: copy '${entry.path}' --> '${destFilePath}'`); }\n          const dstDir = unixify(path.dirname(destFilePath));\n          fs.mkdirSync(dstDir, { recursive: true });\n          fs.copyFileSync(entry.path, destFilePath, fs.constants.COPYFILE_FICLONE);\n        }\n      }\n      continue;\n    }\n  }\n  if (DEBUG >= 1) { console.log(`Copying the extra files to the website destination directory '${config.docTreeBasedir}'...`); }\n    // add a couple of important files, which are probably not included in the file list yet:\n  [ 'CNAME', '.nojekyll' ].forEach((f) => {\n    const p = unixify(path.resolve(path.join(config.docTreeBasedir, f)));\n    if (fs.existsSync(p)) {\n      const destFilePath = unixify(path.join(opts.output, f));\n      const dstDir = unixify(path.dirname(destFilePath));\n      fs.mkdirSync(dstDir, { recursive: true });\n      fs.copyFileSync(p, destFilePath, fs.constants.COPYFILE_FICLONE);\n    }\n  });\n}\n// compile the MarkDown files to a token stream. Belay *rendering* until all files, including the HTML files out there,\n// have been processed as we will be patching some tokens in there before the end is neigh!\nasync function compileMD(mdPath, md, allFiles) {\n  if (DEBUG >= 3) { console.log(`processing file: ${mdPath}...`); }\n  return new Promise((resolve, reject) => {\n    fs.readFile(mdPath, {\n      encoding: 'utf8'\n    }, async (err, data) => {\n      if (err) {\n        reject(new Error(`ERROR: read error ${err} for file ${mdPath}`));\n        return;\n      }\n      const env = {\n        getIncludeRootDir: null,\n        title: null\n      };\n      if (DEBUG >= 8) { console.log(`source: length: ${data.length}`); }\n            // augment the md instance for use with the markdown_it_include plugin:\n      env.getIncludeRootDir = function (options, state, startLine, endLine) {\n        if (DEBUG >= 6) { console.log('##### include root dir is today:', { dir: path.dirname(mdPath) }); }\n        return path.dirname(mdPath);\n      };\n            // let content = md.render(data); --> .parse + .renderer.render\n            //\n            // .parse --> new state + process: return tokens\n            // let tokens = md.parse(data, env)\n      const state = new md.core.State(data, md, env);\n      md.core.process(state);\n      const tokens = state.tokens;\n      const metadata = {\n        frontMatter: null,\n        docTitle: null\n      };\n      if (DEBUG >= 10) { console.log('tokens:\\n', limitDebugOutput(JSON.stringify(cleanTokensForDisplay(tokens), null, 2))); }\n      const typeMap = new Set();\n      traverseTokens(tokens, (t, idx, arr, depth) => {\n        typeMap.add(t.type);\n        markdownTokens[t.type] = true;\n        if (t.type === 'front_matter') {\n          metadata.frontMatter = t.meta;\n        }\n      });\n      if (DEBUG >= 4) { console.log('token types:', typeMap); }\n      if (0) {\n        let position = 0;\n        let prevToken = null;\n        traverseTokens(tokens, (t, idx, arr, depth) => {\n          if (!Number.isFinite(t.position)) {\n            console.error('erroneous token position:', t);\n            return;\n          }\n          if (!Number.isFinite(t.size)) {\n            console.error('erroneous token size:', t);\n            return;\n          }\n          if (t.position >= position) {\n            position = t.position;\n          } else {\n            console.warn('token position is dropping back / reversing:', { position, t, prevToken });\n          }\n          prevToken = t;\n        });\n      }\n      if (!env.title) {\n        metadata.docTitle = env.title;\n      }\n            // update the file record:\n      const el = allFiles.markdown.get(mdPath);\n      if (DEBUG >= 3) { console.log('update the file record:', { mdPath, el: showRec(el) }); }\n      el.mdState = state;\n      el.mdEnv = env;\n      el.mdTypeMap = typeMap;\n      el.metaData = metadata;\n      resolve(el);\n    });\n  });\n}\n// compile the MarkDown files to a token stream. Belay *rendering* until all files, including the HTML files out there,\n// have been processed as we will be patching some tokens in there before the end is neigh!\nasync function renderMD(mdPath, md, allFiles) {\n  if (DEBUG >= 3) { console.log(`processing file: ${mdPath}...`); }\n  return new Promise((resolve, reject) => {\n    const el = allFiles.markdown.get(mdPath);\n    const state = el.mdState;\n    const env = el.mdEnv;\n    const typeMap = el.mdTypeMap;\n    const metadata = el.metaData;\n    const tokens = state.tokens;\n    const content = md.renderer.render(tokens, md.options, env);\n    if (DEBUG >= 4) { console.log('output:\\n', limitDebugOutput(content)); }\n    const dom = new JSDOM('<html><head>\\n' + content, { includeNodeLocations: true });\n    const document = dom.window.document;\n    const bodyEl = document.body; // implicitly created\n    const headEl = document.querySelector('head');\n    if (DEBUG >= 5) { console.log('MARKDOWN:\\n', showRec({ html: document, body: bodyEl.innerHTML, head: headEl.innerHTML })); }\n        // update the file record:\n    if (DEBUG >= 3) { console.log('update the file record:', { mdPath, el: showRec(el) }); }\n    el.HtmlDocument = document;\n    el.HtmlContent = content;\n        //el.HtmlContent = bodyEl.innerHTML;\n    el.HtmlHeadContent = headEl.innerHTML;\n        //el.HtmlBody = bodyEl;\n        //el.HtmlHead = headEl;\n    el.metaData = metadata;\n    resolve(el);\n  });\n}\n// compile the HTML files to a DOM token stream. Belay *rendering* until all files, including the MarkDown files out there,\n// have been processed as we will be patching some DOM nodes in there before the end is neigh!\nasync function loadHTML(htmlPath, allFiles) {\n  if (DEBUG >= 3) { console.log(`processing file: ${htmlPath}...`); }\n  return new Promise((resolve, reject) => {\n    fs.readFile(htmlPath, {\n      encoding: 'utf8'\n    }, async (err, data) => {\n      if (err) {\n        reject(new Error(`ERROR: read error ${err} for file ${htmlPath}`));\n        return;\n      }\n      if (DEBUG >= 8) { console.log(`source: length: ${data.length}`); }\n      const dom = new JSDOM(data, { includeNodeLocations: true });\n      const document = dom.window.document;\n      const bodyEl = document.body; // implicitly created\n      const headEl = document.querySelector('head');\n      const titleEl = headEl && headEl.querySelector('title');\n      const title = titleEl && titleEl.innerHTML;\n      if (DEBUG >= 3) { console.log('HTML:\\n', showRec({ html: document, body: bodyEl.innerHTML, head: headEl.innerHTML })); }\n            // update the file record:\n      const el = allFiles.html.get(htmlPath);\n      el.HtmlDocument = document;\n      el.HtmlContent = bodyEl.innerHTML;\n      el.HtmlHeadContent = headEl.innerHTML;\n            //el.HtmlBody = bodyEl;\n            //el.HtmlHead = headEl;\n      el.metaData = {\n        docTitle: title\n      };\n      resolve(el);\n    });\n  });\n}\n// compile the HTML files to a DOM token stream. Belay *rendering* until all files, including the MarkDown files out there,\n// have been processed as we will be patching some DOM nodes in there before the end is neigh!\nasync function renderHTML(htmlPath, allFiles) {\n  if (DEBUG >= 3) { console.log(`processing file: ${htmlPath}...`); }\n  return new Promise((resolve, reject) => {\n    const el = allFiles.html.get(htmlPath);\n    const document = el.HtmlDocument;\n    const bodyEl = document.body; // implicitly created\n    const headEl = document.querySelector('head');\n    const titleEl = headEl && headEl.querySelector('title');\n    const title = titleEl && titleEl.innerHTML;\n    if (DEBUG >= 3) { console.log('HTML:\\n', showRec({ html: document, body: bodyEl.innerHTML, head: headEl.innerHTML })); }\n        // update the file record:\n    el.HtmlContent = bodyEl.innerHTML;\n    el.HtmlHeadContent = headEl.innerHTML;\n        //el.HtmlBody = bodyEl;\n        //el.HtmlHead = headEl;\n    el.metaData = {\n      docTitle: title\n    };\n    resolve(el);\n  });\n}\nasync function loadFixedAssetTextFile(filePath, allFiles, collection) {\n  if (DEBUG >= 3) { console.log(`processing file: ${filePath}...`); }\n  return new Promise((resolve, reject) => {\n    fs.readFile(filePath, {\n      encoding: 'utf8'\n    }, async (err, data) => {\n      if (err) {\n        reject(new Error(`ERROR: read error ${err} for file ${filePath}`));\n        return;\n      }\n      if (DEBUG >= 8) { console.log(`source: length: ${data.length}`); }\n            // update the file record:\n      const el = collection.get(filePath);\n      el.RawContent = data;\n      resolve(el);\n    });\n  });\n}\nasync function renderFixedAssetTextFile(filePath, allFiles, collection) {\n  if (DEBUG >= 3) { console.log(`processing file: ${filePath}...`); }\n  return new Promise((resolve, reject) => {\n        // update the file record:\n    const el = collection.get(filePath);\n        //el.RawContent = data;\n    resolve(el);\n  });\n}\nasync function loadFixedAssetBinaryFile(filePath, allFiles, collection) {\n  if (DEBUG >= 3) { console.log(`processing file: ${filePath}...`); }\n    // We DO NOT load binary files as that would only clutter the nodeJS heap memory and cause out-of-memory exceptions.\n  return new Promise((resolve, reject) => {\n    const x = fs.existsSync(filePath);\n    if (!x) {\n      reject(new Error(`ERROR: file '${filePath}' does not exist.`));\n      return;\n    }\n        //if (DEBUG >= 8) console.log(`source: length: ${data.length}`);\n        // update the file record:\n    const el = collection.get(filePath);\n        //el.RawContent = data;\n    el.contentIsBinary = true;\n    resolve(el);\n  });\n}\nfunction cleanTokensForDisplay(tokens) {\n  const rv = [];\n  for (const i in tokens) {\n    let t = tokens[i];\n    t = cleanSingleTokenForDisplay(t);\n    if (t.children) {\n      t.children = cleanTokensForDisplay(t.children);\n    }\n    rv[i] = t;\n  }\n  return rv;\n}\nfunction cleanSingleTokenForDisplay(token) {\n  const rv = {};\n  for (const attr in token) {\n    if (token[attr] !== '' && token[attr] != null) {\n      rv[attr] = token[attr];\n    }\n  }\n  return rv;\n}\n// https://vuepress.vuejs.org/plugin/life-cycle.html#generated\nasync function mdGenerated(pagePaths) {\n    // cp docs-src/.nojekyll docs/ && cp docs-src/CNAME docs/\n  console.error('async generated HIT');\n  fs.writeFileSync(absDstPath('CNAME'), 'qiqqa.org\\n', 'utf8');\n  fs.writeFileSync(absDstPath('.nojekyll'), '');\n}\nfunction traverseTokens(tokens, cb, depth) {\n  depth = depth || 0;\n  for (let i = 0, len = tokens.length; i < len; i++) {\n    const t = tokens[i];\n    cb(t, i, tokens, depth);\n    if (t.children) {\n      traverseTokens(t.children, cb, depth + 1);\n    }\n  }\n}\n// demo()\n//   .then(() => {\n//      console.log('done');\n//   })\n//   .catch(err => {\n//     console.error('error:', err);\n//   });\n//# sourceMappingURL=index.js.map\n"],"names":[],"mappings":";;;;;;;;;;;;AAAA;;AAcA,MAAM,UAAU,GAAG,aAAa,CAAC,MAAM,CAAC,IAAP,CAAY,GAAb,CAAhC;;AACA,MAAM,SAAS,GAAG,IAAI,CAAC,OAAL,CAAa,UAAb,CAAlB;;AAEA,MAAM,GAAG,GAAG,IAAI,CAAC,KAAL,CAAW,EAAE,CAAC,YAAH,CAAgB,IAAI,CAAC,SAAL,CAAe,IAAI,CAAC,IAAL,CAAU,SAAV,EAAqB,iBAArB,CAAf,CAAhB,EAAyE,MAAzE,CAAX,CAAZ;AAGA,MAAM;AAAE,EAAA;AAAF,IAAY,KAAlB;AASA,IAAI,KAAK,GAAG,CAAZ;AAEA,MAAM,cAAc,GAA4B,EAAhD;AA2CA,MAAM,MAAM,GAAiB;AAC3B,EAAA,cAAA,EAAc,IADa;AAE3B,EAAA,eAAA,EAAe,IAFY;AAG3B,EAAA,qBAAA,EAAqB;AAHM,CAA7B;AAcc,SAAU,IAAV,GAAc;AAC1B,EAAA,MAAA,CAAA,MAAA,CAAO,UAAP;AAEA,EAAA,MAAA,CACG,OADH,CACW,OADX,EAEG,MAFH,CAEU,OAFV,EAEmB;AACf,IAAA,IAAM,EAAA,GADS;AAEf,IAAA,IAAM,EAAA,KAFS;AAGf,eAAY,CAHG;AAIf,IAAA,IAAM,EAAA;AAJS,GAFnB,EAQG,MARH,CAQU,QARV,EAQoB;AAChB,IAAA,IAAM,EAAA,GADU;AAEhB,eAAW,WAFK;AAGhB,IAAA,IAAM,EAAA;AAHU,GARpB,EAaG,MAbH,CAaU,QAbV,EAaoB;AAChB,IAAA,IAAM,EAAA,GADU;AAEhB,IAAA,IAAM,EAAA,KAFU;AAGhB,IAAA,IAAM,EAAA;AAHU,GAbpB,EAkBG,QAlBH,CAkBY,UAAU,IAAV,EAAgB,GAAhB,EAAmB;AAC3B,QAAI;AACF,MAAA,YAAY,CAAC,IAAD,EAAO,GAAP,CAAZ;AACD,KAFD,CAEC,OAAA,EAAA,EAAA;AAAC,MAAA,OAAW,CAAA,KAAX,CAAW,UAAA,EAAA,CAAA,OAAA,mBAAA,EAAA,EAAX;AACA,MAAA,OAAO,CAAC,IAAR,CAAa,CAAb;AACA;AACD,GAxBL,EAyBI,IAzBJ,CAyBI,4BAzBJ;QA0BG,CAEH,QAAM,UACH,OAAO,SAAS;AAChB,IAAA,IAAA,EAAO,GADS;AAEf,IAAA,IAAM,EAAA,KAFS;AAGf,IAAA,IAAM,EAAA;AAHS,KAKf,OAAA,UAAA;AACD,IAAA,IAAA,EAAO,GADN;AAEA,eAAS,WAFT;AAGA,IAAA,IAAA,EAAA;AAHA,KAKA,OAAA,WAAA;AACD,IAAA,IAAA,EAAO,GADN;AAEA,IAAA,IAAM,EAAA;AAFN,KAIA,SAAA,UAAA,IAAA,EAAA,GAAA,EAAA;AACD,QAAA;AACK,MAAA,WAAA,CAAA,IAAA,EAAA,GAAA,CAAA;KADL,CAEG,OAAA,EAAA,EAAW;AACZ,MAAA,OAAA,CAAA,KAAA,CAAA,UAAA,EAAA,CAAA,OAAA,mBAAA,EAAA,EAAA;AAAC,MAAA,OAAW,CAAA,IAAX,CAAW,CAAX;AACA;AACA,KACD,KAAA;AACH,EAAA,MAAE,CACD,SADD,GAGF,MAHE,CAGI,OAHJ,EAGI;AACH,IAAA,IAAA,EAAA,GADG;AAEH,IAAA,IAAA,EAAO,KAFJ;AAGF,eAAS,CAHP;AAIF,IAAA,IAAM,EAAA;AAJJ,GAHJ,EASE,MATF,CASQ,QATR,EASQ;AACN,IAAA,IAAA,EAAA,GADM;AAEP,eAAO,WAFA;AAGN,IAAA,IAAM,EAAA;AAHA,GATR,EAcE,MAdF,CAcQ,SAdR,EAcQ;AACN,IAAA,IAAA,EAAA,IADM;AAEP,IAAA,IAAA,EAAO,wBAFA;AAGN,IAAA,QAAU,EAAA,YAAA;AACN,aAAE,WAAA,GAAA,CAAA,OAAwB,EAA1B;AACJ;AALM,GAdR,EAqBG,QArBH,CAqBG,UAAA,IAAA,EAAA,GAAA,EAAA;AACD,QAAA;AACD,MAAA,YAAS,CAAA,IAAA,EAAU,GAAV,CAAT;AACC,KAFA,CAEI,OAAA,EAAA,EAAA;AACF,MAAA,OAAA,CAAA,KAAA,CAAa,UAAW,EAAA,CAAA,OAAA,mBAAA,EAAA,EAAxB;AACD,MAAA,OAAA,CAAA,IAAA,CAAA,CAAA;AAAC;AACA,GA3BJ;SA4BI;AACD;;AAGL,SAAA,OAAA,CAAY,IAAZ,EAAe;AAChB,SAAA,IAAA,CAAA,OAAA,CAAA,KAAA,EAAA,GAAA,CAAA;AAID;;AAIA,SAAS,UAAT,CAAiB,GAAjB,EAAqB;AACnB,QAAA,CAAA,GAAO,IAAK,CAAA,IAAL,CAAK,MAAQ,CAAK,cAAlB,EAAyB,GAAzB,CAAP;AACD,SAAA,OAAA,CAAA,IAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA;AAED;;AASE,MAAA,sBAAoB,GAAO,IAAA,GAA3B;;AACA,SAAA,gBAAA,CAAoB,GAApB,EAA2B;AAC5B,MAAA,GAAA,IAAA,GAAA,CAAA,MAAA,GAAA,sBAAA,EAAA;AAED,IAAA,GAAM,GAAA,GAAA,GAAA,CAAA,KAAA,CAAA,CAAA,EAAA,sBAAiC,GAAA,EAAjC,CAAiC,uBAAA,GAAA,CAAA,MAAA,GAAvC;AAEA;;AACE,SAAI,GAAJ;AACE;;AACD,SAAA,oBAAA,CAAA,UAAA,EAAA;AACD,MAAA,UAAW,YAAA,GAAX,EAAW;AACZ,UAAA,EAAA,GAAA,IAAA,GAAA,EAAA;AAED,IAAA,UAAS,CAAA,OAAT,CAAS,CAAA,KAAA,EAAqB,GAArB,KAAqB;AAC5B,MAAA,EAAI,CAAA,GAAJ,CAAI,GAAJ,EAAc,OAAA,CAAA,KAAA,CAAd;AACE,KAFJ;AAII,WAAA,EAAA;AACE;;AACF,SAAC,UAAD;AACA;;AACD,SAAA,2BAAA,CAAA,QAAA,EAAA;AACD,MAAA,QAAA,EAAO;AACR,UAAA,EAAA,GAAA,EAAA;;AAED,SAAS,MAAA,IAAT,IAAS,QAAT,EAAS;AACP,YAAI,CAAA,GAAQ,QAAE,CAAA,IAAA,CAAd;QACE,CAAA,IAAA,IAAQ,oBACN,CAAA,CAAA;AAEF;;WACE;AACA;;SACD;AACD;;AACD,SAAA,OAAA,CAAA,GAAA,EAAA;AACD,MAAA,GAAA,EAAO;AACR,UAAA,EAAA,GAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,GAAA,CAAA;;AAED,SAAS,MAAA,GAAT,IAAoB,EAApB,EAAoB;AAClB,YAAO,IAAE,GAAA,EAAA,CAAA,GAAA,CAAT;;AACE,UAAA,OAAQ,IAAR,KAAkB,QAAlB,IAA6B,IAAK,CAAA,MAAL,GAAK,sBAAlC,EAAkC;AAClC,QAAA,EAAA,CAAA,GAAA,CAAA,GAAK,gBAAiB,CAAA,IAAA,CAAtB;AACE;AACA;;WACE;AACD;;SACF;AACD;;AAkEF,SAAK,yBAAL,CAA+B,GAA/B,EAAiC;AACjC,QAAA,CAAA,GAAO,UAAU,CAAA,GAAA,CAAjB;;AACD,MAAA,EAAA,CAAA,UAAA,CAAA,CAAA,CAAA,EAAA;AAGD,UAAS,GAAA,GAAA,EAAA,CAAA,YAAA,CAAA,CAAA,EAA0B,MAA1B,CAAT,CAHC;AAKK;AACF;AACA;;AACA,UAAA,KAAA,GAAA,GAAA,CAAA,KAAA,CAAA,SAAA,CAAA;AACA,UAAA,QAAA,GAAA,KAAA,CAAA,MAAA,CAAA,CAAA,IAAA,CAAA,CAAA,IAAA,GAAA,MAAA,GAAA,CAAA,IAAqD,CAAA,CAAA,QAAA,CAAA,GAAA,CAArD,EAAqD,GAArD,CAAqD,CAAA,IAAA;AACrD,UAAA,KAAA,GAAA,CAAA,CAAA,KAAA,CAAA,GAAA,CAAA;;AACA,UAAA,KAAM,CAAA,MAAN,KAAkB,CAAlB,EAAkB;AAClB,cAAM,IAAA,KAAA,CAAW,kBAAiB,GAAI,mCAAhC,CAAN;AACE;;WACA,GAAA,KAAI,CAAA,GAAJ,CAAU,CAAA,IAAM,CAAA,CAAK,IAAL,EAAhB;aACE;AACD,KAPH,CAAA;YAQE,GAAA;YACA,CAAA,QAAO,CAAA,IAAM;QACf,CAAC,CAAC,CAAC,CAAD,CAAF,IAAG,CAAA,CAAA,CAAA;AACH;AACA,WAAA,EAAA;AACE;;AACF,SAAC,EAAD;AACA;;AACD,SAAA,6BAAA,CAAA,IAAA,EAAA;AACD;AACD,EAAA,IAAA,GAAA,IAAA,CAAA,OAAA,CAAA,OAAA,EAAA,GAAA,CAAA;AAED,EAAA,IAAA,GAAS,IAAA,CAAA,OAAA,CAAA,QAAA,EAAA,GAAA,CAAT;AACE,EAAA,IAAA,GAAA,CAAA,CAAA,MAAA,CAAA,IAAA,EAAA,IAAA,EAAA,CALC;AAOD;;AACA,EAAA,IAAA,GAAI,IAAK,CACT,OADI,CACJ,gBADI,EACgB,GADhB,CAAJ;AAEA,EAAA,IAAA,GAAA,IAAA,CACI,OADJ,CACW,MADX,EACW,GADX,CAAA;SAEK,IAAA,CACD,OADC,CACM,MADN,EACM,GADN;;MAEA,KAAA,IAAA,GAAQ;AAAA,IAAA,OAAQ,CAAG,GAAX,CAAa,uCAAb,EAAa,IAAb;AAAa;;AAC1B,EAAA,IAAA,GAAI,IAAG,CACF,OADD,CACS,MADT,EACiB,GADjB,CAAJ;AAEA,EAAA,IAAA,GAAI,IAAK,CAAO,OAAZ,CAAoB,MAApB,EAAwB,GAAxB,CAAJ;AACA,EAAA,IAAA,GAAI,IAAG,CACF,OADD,CACS,cADT,EACsB,GADtB,CAAJ;;AAEA,MAAA,KAAO,IAAI,CAAX,EAAW;AAAA,IAAA,OAAA,CAAA,GAAA,CAAA,uCAAA,EAAA,IAAA;AAAA;;SACN,IAAA,CACD,OADC,CACM,cADN,EACM,IADN;SAEA,IAAA,CACD,OADC,CACQ,cADR,EACS,IADT;;MACW,KAAA,IAAO,GAAC;AAAI,IAAA,OAAA,CAAA,GAAA,CAAA,uCAAA,EAA+C,IAA/C;AAA+C;;AAC3E,EAAA,IAAA,GAAI,IAAG,CACF,OADD,CACS,IADT,EACS,GADT,CAAJ;;AAEA,MAAA,KAAO,IAAI,CAAX,EAAW;AAAA,IAAA,OAAA,CAAA,GAAA,CAAA,uCAAA,EAAA,IAAA;AAAA;;SACN;AACL;;AAAgB,eAAO,gBAAP,CAAY,YAAZ,EAAY;AAC5B,MAAA,YAAA,EAAW;AACN;AACL,QAAI,KAAK,IAAI,CAAb,EAAc;AAAA,MAAA,OAAA,CAAA,GAAA,CAAA,oBAAA,YAAA,GAAA;AAAA;;QAAE,CAAA,IAAA,CAAA,UAAA,CAAY,YAAZ,GAAY;AAErB;AACR,MAAA,YAAA,GAAA,OAAA,CAAA,IAAA,CAAA,IAAA,CAAA,OAAA,CAAA,GAAA,EAAA,EAAA,YAAA,CAAA,CAAA;AAKI;;AACH,QAAI,KAAA,IAAA,CAAJ,EAAgB;AAAE,MAAA,OAAA,CAAA,GAAA,CAAA,8BAAA,YAAA,IAAA;AAAA;;QAChB;AACA,YAAI,UAAU,GAAA,MAAA,OAAA,YAAA,YAAA,CAAd;AAAiB,aAAA,UAAA;MACjB,OAAK,GAAL,EAAU;AACR,MAAA,OAAA,CAAA,KAAA,CAAA,kBAAA,EAAA,GAAA,EADQ;;AAGT,YAAA,IAAA,KAAA,CAAA,wCAAA,YAAA,aAAA,GAAA,EAAA,CAAA;AACD;GAlBF,MAkBmB;AACjB,WAAA,IAAI,OAAJ,CAAI,CAAA,OAAA,EAAA,MAAA,KAAA;YACF,UAAM,GAAA;AACN,MAAA,OAAA,CAAA,UAAA,CAAA;AACD,KAHD,CAAA;AAGE;AACA;;AACA,eAAA,WAAA,CAAA,IAAA,EAAA,OAAA,EAAA;UACA,IAAA,yBAAgB,OAAA,IAAA,cAAA,WAAwC,IAAA,CAAY,SAAZ,CAAY,IAAZ,EAA4B,IAA5B,EAAgC,CAAhC,CAAgC;OACzF,GAAA,IAAA,CAAA,GAAA,CAAA,KAAA,EAAA,MAAA,CAAA,QAAA,CAAA,CAAA,IAAA,CAAA,KAAA,IAAA,CAAA,IAAA,CAAA,KAAA,GAAA,IAAA,CAAA,KAAA,GAAA,CAAA,GAAA,CAAA;AACF,EAAA,OAAA,CAAA,GAAA,CAAA,UAAA,EAAA,KAAA;SAAM,IAAA,OAAA,CAAA,CAAA,OAAA,EAAA,MAAA,KAAA;AACL,IAAA,OAAA,CAAA,CAAA,CAAA;AACE,GAFG;AAGH;;AACF,eAAG,YAAH,CAAG,IAAH,EAAG,OAAH,EAAG;AACJ,EAAA,OAAA,CAAA,GAAA,CAAA,0BAAA,OAAA,IAAA,cAAA,WAAA,IAAA,CAAA,SAAA,CAAA,IAAA,EAAA,IAAA,EAAA,CAAA,CAAA,EAAA;AACF,EAAA,KAAA,GAAA,IAAA,CAAA,GAAA,CAAA,KAAA,EAAA,MAAA,CAAA,QAAA,CAAA,CAAA,IAAA,CAAA,KAAA,IAAA,CAAA,IAAA,CAAA,KAAA,GAAA,IAAA,CAAA,KAAA,GAAA,CAAA,GAAA,CAAA,CAAA;AAED,EAAA,OAAK,CAAA,GAAL,CAAK,UAAL,EAA0B,KAA1B;;AACE,QAAA,KAAQ,GACN,IAAA,CAAA,CAAA,CAAA,KAAA,CAAA,OAAA,GAAA,CAAA,GAAyB,CAAzB,CADF;;AAQA,QAAA,aAAiB,GAAA,CAAjB;;AACA,MAAA,CAAA,KAAA,IAAY,KAAA,CAAA,MAAA,GAAY,aAAxB,EAA+B;AAE/B,UAAA,IAAO,KAAP,CAAW,6EAAX,CAAA;AACE,GAjBG;;;AAmBN,QAAA,YAAA,GAAA,IAAA,CAAA,MAAA;AAGD,MAAK,UAAU,GAAA,IAAf;;AACE,MAAA;AAQA,IAAA,UAAQ,GAAK,MAAI,gBAAc,CAAA,YAAA,CAA/B;GARA,CASA,OAAO,GAAP,EAAY;AAEZ,IAAA,OAAM,CAAA,KAAN,CAAc,4FAAd,EAA4C,GAA5C;AACA,IAAA,UAAM,GAAA,MAAa,gBAAK,CAAA,IAAA,CAAxB;AAEA;;MACE,mBACE,GAAA,KAAA,CAAA,CAAA,EAvCC;;AA2CL,MAAA,CAAA,IAAA,CAAA,UAAA,CAAA,mBAAA,CAAA,EAAyC;AACzC,IAAA,mBAAkB,GAAG,IAAK,CAAA,IAAL,CAAW,OAAC,CAAA,GAAD,EAAX,EAAY,mBAAZ,CAArB;AAEA;;AACA,EAAA,mBAAI,GAAA,OAAA,CAAA,IAAA,CAAA,SAAA,CAAA,mBAAA,CAAA,CAAJ;;MACE,KAAA,IAAA,GAAU;AAAA,IAAA,OAAS,CAAA,GAAT,CAAS,wBAAT,EAAwC,mBAAxC;AAAwC;;AACnD,MAAA,UAAA,GAAA,EAAA,CAAA,SAAA,CAAA,mBAAA,CAAA;;AAAC,MAAA,UAAY,IAAA,UAAA,CAAA,WAAA,EAAZ,EAAY;AACZ;AACA;AACD;AAEG;AACJ,QAAA,SAAA;AACA,QAAI,iBAAiB,GAAA,CAArB;QACE,QAAA,GAAA,IAAA,CAAA,IAAA,CAAmB,mBAAnB,EAAwC,iBAAxC;AACD,IAAA,QAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AACD,QAAA,KAAA,IAAA,CAAA,EAAA;AAAA,MAAA,OAAsB,CAAA,GAAtB,CAA8B,WAA9B,EAAmC,QAAnC;AAA6C;;AAC7C,UAAI,KAAK,GAAK,IAAA,CAAA,IAAA,CAAA,QAAA,EAAA;AAAE,MAAA,MAAA,EAAA,IAAF;AAEd,MAAA,OAAI,EAAA,IAFU;AAId,MAAA,QAAI,EAAA,KAJU;AAKZ,MAAA,MAAA,EAAA,IALY;AAMZ,MAAA,KAAA,EAAA,IANY;AAOZ,MAAA,OAAA,EAAA,KAPY;AAQZ,MAAA,SAAA,EAAA;AARY,KAAA,CAAd;;QAUE,KAAI,IAAA,GAAA;AAAA,MAAA,OAAiB,CAAA,GAAjB,CAAsB,4BAAA,IAAA,CAAA,SAAA,CAAA,KAAA,EAAA,IAAA,EAAA,CAAA,CAAA,EAAtB;AAAsB;;AAC1B,UAAA,QAAI,GAAQ,KAAG,IAAK,EAApB;;AACA,SAAA,MAAA,CAAA,IAAW,QAAX,EAAmB;AACnB,UAAA,KAAI,IAAK,EAAT,EAAc;AAAA,QAAA,OAAA,CAAA,GAAA,CAAA,OAAA,EAAA;AAAA,UAAA;AAAA,SAAA;AAAA;;YAAE,QAAQ,GAAG,IAAC,CAAA,QAAD,CAAc,CAAA,CAAA,WAAA,EAAd;;AAC3B,UAAA,KAAM,IAAK,CAAX,EAAc;AAAA,QAAA,OAAS,CAAC,GAAV,CAAU,yBAAV,EAAoB,QAApB;AAAoB;;AAChC,cAAA,QAAA;aACA;cACA,iBAAe,GAAA,IAAA;AACf,YAAA,iBAAY,GAAA,EAAZ;AACA,YAAA,SAAO,GAAA,CAAP;AACA;;AACA;;AACD,aAAE,WAAF;AACD,aAAA,YAAA;cAAgB,iBAAY,GAAA,GAAA;AAE5B,YAAA,iBAAiB,GAAK,CAAtB;AACA,YAAA,SAAW,GAAC,CAAZ;AACE;;AAAiB;;aACjB;cACA,KAAI,IAAK,GAAA;AAAK,YAAA,OAAA,CAAA,GAAA,CAAA,MAAA,EAAA,QAAA;AAAA;;cAAE,iBAAY,GAAA,GAAA;AAC5B,YAAA,iBAAQ,GAAU,CAAlB;AACA,YAAA,SAAA,GAAK,CAAL;AACE;;0BACE;AAAA,YAAA,OAAA,CAAA,GAAA,CAAA,WAAA,EAAuB,SAAvB;AAAuB;;AACvB;;AACD;mBACD,IAAA,GAAA;AAAM,YAAA,OAAA,CAAA,GAAA,CAAA,OAAA,EAAA,QAAA;AAAA;;AAER;AAvBA;AAyBE;;;AACE,MAAA,OAAA,CAAA,GAAA,CAAA,WAAA,EAAsB,SAAtB;AAAsB;;;AACtB,MAAA,OAAA,CAAA,GAAA,CAAS,wBAAT,EAAc,SAAd;AAAc;;mBACf;AACD,MAAA,mBAAA,GAAM,OAAA,CAAA,IAAA,CAAA,OAAA,CAAA,SAAA,CAAA,CAAN;;eAEF,IAAA,GAAK;AAAA,QAAA,OAAA,CAAW,GAAX,CAAW,kCAAX,EAAW,mBAAX;AAAW;;mBACd,EAAA,CAAA,SAAA,CAAS,mBAAT;WAAgB;gBAChB,MAAA,8GAA2B,mBAAA,KAAA,QAAA;AACzB;AACA;;mBACD;cACD,MAAA,+BAAc,mBAAA;AAAE;;kBAChB,UAAM;cAER,MAAA,8BAAA,mBAAA;AACE;;SAAgB,iBAAA,IAAA,CAAO,OAAP,CAAY,mBAAZ;mBAChB,GAAA,KAAM,CAAA,CAAA,CAAN,IAAM,IAAA,CAAA,IAAA,CAAA,MAAA,CAAA,cAAA,EAAA,CAAA,MAAA,CAAA,cAAA,CAAA,QAAA,CAAA,MAAA,CAAA,GAAA,SAAA,GAAA,QAAA,IAAA,CAAA,QAAA,CAAA,MAAA,CAAA,cAAA,CAAA,GAAA,SAAA,EArHP;;OAuHF,IAAA,CAAA,UAAA,CAAA,aAAA,GAAA;AACD,IAAA,aAAS,GAAA,IAAM,CAAA,IAAN,CAAM,OAAA,CAAA,GAAA,EAAN,EAAM,aAAN,CAAT;AAAiB;;AAEjB,EAAA,aAAI,GAAK,OAAK,CAAA,IAAA,CAAA,SAAA,CAAA,aAAA,CAAA,CAAd;;WAAgB,IAAA,GAAA;AAAQ,IAAA,OAAI,CAAA,GAAJ,CAAI,kBAAJ,EAA8B,aAA9B;AAAyC;;QACjE,CAAA,kBAAe;SACb,wBAAmB,OAAG,CAAO,IAAC,CAAI,QAAL,CAAc,MAAA,CAAA,cAAd,EAA0B,MAAA,CAAA,eAA1B,CAAP;;WACtB,IAAA,GAAI;AAAA,IAAA,OAAU,CAAA,GAAV,CAAU,SAAV,EAAU,MAAV;AAAU;;QAAE,cAAA,GAAQ;YACxB,EAAA,CACD,IADC,EACK,UADL,CADwB;QAMzB,EAAA,CACF,MADE,EAGH,KAHG,CANyB;AAW3B,IAAA,EAAA,EAAA,CAED,IAFC,EAGC,KAHD,EAIA,KAJA,EAMD,KANC,EAQD,IARC,EASD,QATC,CAX2B;OAsB1B,EAAA,CACD,KADC,EAEF,MAFE,EAGF,MAHE,EAGc,MAHd,EAIF,QAJE,CAtB0B;AA8B5B,IAAA,KAAI,EAAA,CAAY,KAAZ,EAGJ,KAHI,EAIF,KAJE,EAKA,MALA,EAMA,MANA,EAOD,KAPC,EAQF,KARE,EASA,KATA,EAUA,IAVA,EAWD,MAXC,CA9BwB;WA2CxB,CACA,KADA,EAEA,KAFA,EAGA,KAHA,EAIA,KAJA,EAKA,KALA,EAMD,MANC,CA3CwB;WAmDxB,EAAA,CACA,KADA,EAEA,KAFA,EAGA,IAHA,EAIA,KAJA,EAKD,IALC,CAnDwB;YA0DxB,CACA,KADA,EAEA,KAFA;AA1DwB;QA+DxB,sBAAK,GAAA;SACL,IADK;SAEL,IAFK;SAGL,IAHK;UAIL,IAJK;QAKN,EAAA,IALM;OAMP,EAAA,IANO;SAOL,KAPK;SAQL,IARK;QASL,IATK;SAUL,IAVK;SAWL,IAXK;SAYL,IAZK;SAaN,IAbM;OAcP,EAAA,IAdO;UAeL,IAfK;UAgBL,IAhBK;SAiBL,IAjBK;SAkBL,IAlBK;QAmBL,IAnBK;SAoBN,IApBM;AAqBP,UAAA,IArBO;SAsBL,IAtBK;SAuBL;AAvBK;AAyBR,QAAC,UAAA,GAAA,IAAA,GAAA,EAAD;;AACD,OAAA,MAAM,CAAN,IAAM,cAAN,EAA4B;AAC1B,UAAA,CAAG,GAAE,cAAI,CAAA,CAAA,CAAT;;QACA,KAAK,IAAI,GAAA;AAAA,MAAA,OAAA,CAAA,GAAA,CAAA,OAAA,EAAA;AAAA,QAAA,CAAA;AAAA,QAAA;AAAA,OAAA;AAAA;;AACT,SAAA,MAAK,CAAL,IAAS,CAAT,EAAS;AACT,UAAA,KAAM,IAAI,CAAV,EAAU;AAAA,QAAA,OAAA,CAAA,GAAA,CAAA,YAAA,EAAA;AAAA,UAAA,CAAA;AAAA,UAAA;AAAA,SAAA;AAAA;;AACV,MAAA,UAAM,CAAA,GAAN,CAAU,MAAA,CAAV,EAAU,CAAV;AACA;AACA;;MACA,KAAG,IAAE,GAAI;AAAA,IAAA,OAAA,CAAA,GAAA,CAAA,gEAAA,EAAA,UAAA,EAAA,+CAAA;AAAA,GA9NN;AAgOH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,iBAAM,eAAN,GAAU;QACV,QAAK,GAAI,IAAA,CAAA,IAAA,CAAA,MAAA,CAAA,cAAA,EAAA,MAAA;AACT,IAAA,QAAG,GAAE,OAAI,CAAA,QAAA,CAAT;;AACD,QAAC,KAAA,IAAA,CAAD,EAAC;AAAA,MAAA,OAAA,CAAA,GAAA,CAAA,WAAA,EAAA,QAAA;AAAA;;AACF,WAAM,IAAA,OAAA,CAAa,CAAA,OAAA,EAAU,MAAV,KAAU;AAC7B,MAAA,IAAK,CAAA,QAAA,EAAW;AACd,QAAA,MAAM,EAAC,IADO;AAEd,QAAA,OAAI,EAAK,IAFK;AAEE,QAAA,QAAA,EAAA,KAFF;AAGd,QAAA,MAAK,EAAA,IAHS;AAIZ,QAAA,KAAA,EAAA,IAJY;eAII,EAAA,KAJJ;AAKZ,QAAA,SAAA,EAAA;AALY,OAAX,EAMF,SAAA,kBAAA,CAAA,GAAA,EAAA,KAAA,EAAA;AACF,YAAA,GAAA,EAAA;AAEG,UAAA,MAAK,CAAI,IAAC,KAAD,CAAC,oBAAA,GAAA,EAAD,CAAJ,CAAL;AAAY;AAIhB;;AACE,YAAA,KAAA,IAAA,CAAA,EAAA;AAAA,UAAA,OAAA,CAAA,GAAA,CAAA,4BAAA,IAAA,CAAA,SAAA,CAAA,KAAA,EAAA,IAAA,EAAA,CAAA,CAAA,EAAA;AAAA;;AACF,cAAA,EAAA,GAAA;AACA,UAAA,QAAA,EAAA,IAAA,GAAA,EADA;AAEE,UAAA,IAAA,EAAA,IAAA,GAAA,EAFF;AAGI,UAAA,GAAA,EAAA,IAAA,GAAA,EAHJ;AAIA,UAAA,EAAA,EAAA,IAAA,GAAA,EAJA;AAKA,UAAA,KAAA,EAAA,IAAA,GAAA,EALA;AAMA,UAAA,KAAA,EAAA,IAAA,GAAA,EANA;AAOA,UAAA,OAAA,EAAA,IAAA,GAAA,EAPA;AAQI,UAAA,MAAA,EAAA,IAAA,GAAA,EARJ;AASE,UAAA,IAAA,EAAA,IAAA,GAAA,EATF;AAUK,UAAA,CAAA,EAAA,IAAA,GAAA;AAVL,SAAA;;AAYE,aAAA,MAAW,CAAX,IAAW,KAAQ,IAAA,EAAnB,EAA6B;AAC7B,UAAA,mBAAc,CAAA,CAAA,EAAA,EAAA,CAAd;AAAgB;;AAEhB,QAAA,OAAO,CAAA,EAAA,CAAP;AACE,OA/BC,CAAL;AAgCM,KAjCA,CAAN;AAkCM;;WACA,oBAAe,GAAA,YAAA;cACf,OAAA,CAAM,IAAE,CAAA,OAAF,CAAM,CAAN,CAAN;;aACA,IAAA,GAAA;AAAK,MAAA,OAAM,CAAA,GAAN,CAAM,0DAAN,EAAM;AAAA,cAAA,CAAA;AAAA,QAAA,GAAA,EAAA;AAAA,OAAN;AAAM;;eACX,GAAA,IAAA,CAAO,QAAP,CAAc,CAAd,EAHe;;QAKhB,MAAA,GAAE;cACD,aAAS,aAAA,mBAAA,cAAA,QAAA,CAAA,IAAA;iBACP,MAAA,YAAW,CAAK,KAAC,OAAA;iBACjB;iBACD,CAAA,YAAA,MAAA,IAAA,CAAA,CAAA,IAAA,CAAA,KAAA,GAAA;cAED,GAAA;AAAgB;AAEhB;;iBACE;kBACA,IAAA,CAAA,OAAA,CAAU,KAAV,EAAe,WAAf;iBACA;cACA,CADA;gBAEA,KAAA,CAAA,WAAA,EAFA;aAGA,GAHA;oBAIA,EAAA,OAAS,CAAA,IAAI,CAAA,QAAJ,CAAS,MAAA,CAAA,cAAT,EAAS,CAAT,CAAA,CAJT;AAKA,QAAA,kBAAM,EAAE,IALR;oBAMA,IANA;AAOA,QAAA,eAAG,EAAA,sBAAS,CAAA,GAAA,CAAT,IAAS;AAPZ;eAUF,GAAA,UAAY,CAAA,GAAZ,CAAgB,GAAhB,KAAyB;iBACvB,KAAA,IAAA,GAAA;;iBACD,EAAA,IAAA,GAAA;WACD;AACF,MAAA,OAAC,CAAC,GAAF,CAAG,wBAAA,CAAA,IAAH;AACF;AACF,GAlTK;;;QAqTH,IAAA,GAAO,eAAe;QACtB,EAAA,GAAI,QAAS,CAAC;AAAE;QAChB,EAAA,IADc;AAGd;AACA,IAAA,QAAI,EAAA,KAJU;AAMd;YACE,KAPY;AAQV;AACD,IAAA,UAAA,EAAA,WATW;AASL;aACL,IAVU;AAWX;AACH;AAEA;AACE;AACA;AACE;AACA;AACA;AACA;AACA;gBACA,EAAA,KAtBU;AAuBV;AACD,IAAA,WAAC,EAAA,IAxBU;AAyBZ;AACA;AACA;AACD;AAAM;YACL,MA7BY;AA8Bb;AACF;AAGD;AACA,IAAA,SAAM,EAAI,YAAG;AAEb,MAAA,OAAQ,CAAA,KAAR,CAAW,4BAAX;AACE,aAAA,EAAA;KAtCc;AAwCd;;AAxCc,GAAD,EAtTV;AAiWH;;MACA,KAAA,IAAA,GAAA;AAAA,IAAA,OAAA,CAAA,GAAA,CAAA,yBAAA,EAAA,kBAAA,EAAA,OAAA,kBAAkF,CAAA,eAAlF;AAAkF;;AAClF,EAAA,kBAAY,CAAA,eAAZ,CAAuB,EAAvB,EAAuB;QACvB,EAAA;AACA,MAAA,aAAS,EAAI,yBAAA,CAAA,kCAAA,CADb;AAEA,MAAA,KAAA,EAAA,yBAAgB,CAAA,0BAAA,CAFhB;AAGA,MAAA,QAAA,EAAA,yBAAA,CAAA,qCAAA;AAHA,KADuB;AAMvB,IAAA,OAAA,EAAA;AACA,MAAA,IAAA,EAAA,YADA;AAEA,MAAA,UAAA,EAAA,CAAA,OAAA,EAAA,KAAA,EAAA,SAAA,EAAA,OAAA,KAAA,KAAA,CAAA,GAAA,CAAA,iBAAA,CAAA,OAAA,EAAA,KAAA,EAAA,SAAA,EAAA,OAAA;AAFA,KANuB;AAUvB,IAAA,SAAA,EAAA;AACA,MAAA,mBAAE,EAAA,UAAA,QAAA,EAAA;AACF,cAAA,EAAA,GAAA,6BAAA,CAAA,QAAA,CAAA;;AACA,YAAA,KAAA,IAAY,CAAZ,EAAc;AAAA,UAAA,OAAK,CAAA,GAAL,CAAK,qBAAL,EAAK;AAAA,kBAAA,QAAA;AAAA,YAAA,GAAA,EAAA;AAAA,WAAL;AAAK;;AACnB,eAAA,EAAA;AACA;AALA;AAVuB,GAAvB;QAkBA,QAAE,GAAA,MAAA;;MACF,KAAA,IAAA,GAAA;AAAA,IAAA,OAAA,CAAA,GAAA,CAAA,4BAAA,EAAA,2BAAkE,CAAA,QAAA,CAAlE;AAAkE;;OAClE,QAAA,CAAA,QAAA,CAAA,GAAA,CAAA,mBAAA,KAAA,CAAA,QAAA,CAAA,IAAA,CAAA,GAAA,CAAA,mBAAA,GAAwE;AACxE,UAAA,IAAM,KAAN,CAAQ,cAAM,mBAAA,yCAAd,CAAA;AACA;;AAOA,EAAA,OAAC,CAAC,GAAF,CAAE,kCAAF,EAhYG;AAkYJ;AAED;;AACA,OAAA,MAAA,IAAA,IAAA,QAAA,EAAA;AAEA,YAAI,IAAJ;AAAgB,WAAA,GAAA;AAChB;;AACE,WAAA,UAAA;AACE;AACA,gBAAA,UAAe,GAAA,QAAA,CAAA,IAAA,CAAf;;AACA,eAAA,MAAA,IAAA,IAAe,UAAf,EAAe;AAChB,kBAAA,GAAA,GAAA,IAAA,CAAA,CAAA,CAAA;AAED,kBAAO,KAAE,GAAA,IAAA,CAAA,CAAA,CAAT,CAHiB;;AAKf,YAAA,KAAA,CAAA,kBAAA,GAAsB,6BAA8B,CAAA,KAAM,CAAG,YAAT,CAAU,KAAV,CAA4B,CAA5B,EAA4B,KAAO,CAAE,YAAT,CAAgB,MAAhB,GAA2B,KAAQ,CAAA,GAAR,CAAQ,MAA/D,CAAA,CAA9B,GAA6F,OAAnH;;AACD,gBAAA,KAAA,IAAA,CAAA,EAAA;AAAA,cAAA,OAAA,CAAA,GAAA,CAAA,gDAAA,EAAA,OAAA,CAAA,KAAA,CAAA;AAAA;;AAED,kBAAA,QAAW,GAAA,MAAA,SAAA,CAAA,GAAA,EAAA,EAAA,EAAA,QAAA,CAAX;;AACE,gBAAA,KAAA,IAAA,CAAA,EAAA;AAAA,cAAA,OAAqB,CAAA,GAArB,CAAqB,UAArB,EAAuC,OAAA,CAAA,QAAA,CAAvC;AAAuC;;kBACrC,CAAA,YAAW,UAAA;AACX;AAAgB;AAChB;;WACF;AACD;AACA,gBAAA,UAAA,GAAA,QAAA,CAAA,IAAA,CAAA;;AAEH,eAAM,MAAQ,IAAd,IAA0C,UAA1C,EAA+C;AAC3C,kBAAK,GAAK,GAAA,IAAA,CAAA,CAAA,CAAV;AAAY,kBAAQ,KAAI,GAAA,IAAA,CAAA,CAAA,CAAZ,CAD+B;;AAI7C,YAAA,KAAM,CAAA,kBAAN,GAAgB,6BAAiC,CAAA,KAAA,CAAA,YAAA,CAAA,KAAA,CAAA,CAAA,EAAA,KAA2C,CAAA,YAA3C,CAA2C,MAA3C,GAA2C,KAAA,CAAA,GAAA,CAAA,MAA3C,CAAA,CAAjC,GAA4E,OAA5F;;AACD,gBAAA,KAAA,IAAA,CAAA,EAAA;AAAA,cAAA,OAAA,CAAA,GAAA,CAAA,4CAAA,EAAA,OAAA,CAAA,KAAA,CAAA;AAAA;;AAGI,kBAAE,QAAA,GAAA,MAAA,QAAA,CAAA,GAAA,EAAA,QAAA,CAAF;;AACH,gBAAA,KAAW,IAAC,CAAZ,EAAY;AAAA,cAAA,OAAA,CAAA,GAAA,CAAA,UAAA,EAAyB,OAAA,CAAA,QAAA,CAAzB;AAAmD;;AAC/D,YAAA,MAAM,CAAA,WAAN,CAAgB,QAAhB,EAA+B,KAA/B;AAEA;AAAiB;AAClB;;AAED,WAAA,KAAA;AAEA,WAAA,IAAA;AACE;AACF,gBAAA,UAAA,GAAA,QAAA,CAAA,IAAA,CAAA;;AACA,eAAK,MAAU,IAAf,IAAmB,UAAnB,EAA6B;AAC3B,kBAAQ,GAAA,GAAM,IAAA,CAAA,CAAA,CAAd;AACA,kBAAA,KAAQ,GAAA,IAAA,CAAA,CAAA,CAAR;kBACE,qBAAS,6BAAA,CAAA,KAAA,CAAA,YAAA,CAAA,KAAA,CAAA,CAAA,EAAA,KAAA,CAAA,YAAA,CAAA,MAAA,GAAA,KAAA,CAAA,GAAA,CAAA,MAAA,CAAA,CAAA,GAAA,KAAA,CAAA;;AAEX,gBAAA,KAAK,IAAA,CAAL,EAAK;AAAU,cAAA,OAAA,CAAA,GAAA,CAAA,kCAAA,IAAA,gBAAA,EAAA,OAAA,CAAA,KAAA,CAAA;AAAA;;kBACb,QAAA,GAAA,MAAA,sBAAA,CAAA,GAAA,EAAA,QAAA,EAAA,UAAA;;qBACE,IAAA,GAAM;AAAA,cAAA,OAAA,CAAU,GAAV,CAAa,UAAb,EAA0B,OAAE,CAAA,QAAA,CAA5B;AAA4B;;mBAClC,YAAK,UAAc;AACjB;AACA;AACA;;AACA;AACA;6BAAgB,QAAO,CAAC,IAAD;;qBAEvB,QAAA,YAAc;wBAEd,IAAA,CAAA,CAAA;8BAAgB,CAAA,CAAA;kBAChB,qBAAO,6BAA6B,CAAA,KAAA,CAAA,YAAA,CAAA,KAAA,CAAA,CAAA,EAAA,KAAA,CAAA,YAAA,CAAA,MAAA,GAAA,KAAA,CAAA,GAAA,CAAA,MAAA,CAAA,CAA7B,GAA6B,KAAA,CAAA;;qBACrC,IAAA,GAAA;AAAA,cAAA,OAAA,CAAA,GAAA,CAAA,kCAAA,IAAA,gBAAA,EAAA,OAAA,CAAA,KAAA,CAAA;AAAA;;kBACF,QAAA,GAAA,MAAA,wBAAA,CAAA,GAAA,EAAA,QAAA,EAAA,UAAA;;gBACD,KAAA,IAAA,GAAS;AAAA,cAAA,OAAA,CAAA,GAAA,CAAA,UAAA,EAAA,OAAA,CAAA,QAAA,CAAA;AAAA;;AAEX,YAAA,MAAA,CAAK,WAAL,CAAW,QAAX,EAAW,KAAX;AACE;AACE;AACA;AApEN;AAsEQ,GA7cH;AA+cG;;;;AACA,IAAA,OAAA,CAAI,GAAJ,CAAI,gCAAJ,EAAc,2BAAA,CAAA,QAAA,CAAd;AAAc;;;YAAE,IAAA,6BAAY,MAAA,CAAA,IAAA,CAAA,cAAA,EAA8C,IAA9C;AAA2D;;cAEvF,yBAldH;AAodmB;AAChB;;qBACD,UAAA;YACF;WACD;AAEF;;WACA;AACE;gBACE,UAAA,GAAM,QAAA,CAAU,IAAV;;qBACN,QAAK,YAAc;AAIjB;AAAgB;AAEhB;;WAEA;AAAgB;0BAChB,GAAA,QAAO,CAAA,IAAA;;qBACR,QAAA,YAAA;AAKH;AACE;AACA;AACE;;WACA;WACA;AACA;6BAAgB,QAAO,CAAC,IAAD;;qBAEvB,QAAA,YAAc;AAIf;AACF;AACD;;AACD;AACF;AAED,gBAAA,UAAA,GAAA,QAAA,CAAA,IAAA,CAAA;;AACE,eAAA,MAAA,IAAA,IAAA,UAAA,EAAA;AAEc;AAMhB;AAEA;;AAEA;;AACA,EAAA,OAAK,CAAA,GAAL,CAAK,iCAAL,EA7gBK;AA+gBH;AACE;;OAEF,MAAA,QAAK,UAAU;YACb;WACE;AACA;;WACE;AACA;0BACA,GAAA,QAAA,CAAA,IAAA;;qBACD,QAAA,YAAA;AAIL;AACE;AACE;;WACA;AACE;0BACA,GAAA,QAAW,CAAA,IAAA;;qBACX,QAAA,YAAA;AAGH;AACD;AAEF;;WACA;WACE;AACE;gBACA,UAAA,GAAK,QAAU,CAAA,IAAA;;qBACb,QAAA,YAAY;AAGb;AACF;AACD;;AAEF;AACE;gBACE,UAAA,GAAM,QAAA,CAAU,IAAV;;qBACN,QAAK,YAAc;AAGjB;AACD;AACF;;AAEF;;AACF,EAAA,OAAA,CAAA,GAAA,CAAA,mCAAA,EAhkBI;AA6kBL;AACA;;AACA,OAAA,MAAA,IAAA,IAAA,QAAA,EAAA;AACA,YAAK,IAAL;AACE,WAAA,GAAA;AACA;;WACE;AAEF;gBACE,UAAA,GAAA,QAAA,CAAA,IAAA;;qBACE,QAAM,YAAa;qBACnB,GAAA,IAAK,CAAA,CAAA;0BACH,IAAA,CAAA,CAAA;0BACA,GAAA,MAAM,QAAQ,CAAI,GAAJ,EAAQ,EAAR,EAAQ,QAAR;;qBACf,IAAA,GAAA;AAAA,cAAA,OAAA,CAAA,GAAA,CAAA,UAAA,EAAA,OAAA,CAAA,QAAA,CAAA;AAAA;;mBACF,YAAA,UAAA;AACD;AAEF;AACE;;WACE;AACA;0BACE,GAAA,QAAS,CAAG,IAAH;;qBACT,QAAA,YAAc;qBACf,GAAA,IAAA,CAAA,CAAA;kBACF,KAAA,GAAA,IAAA,CAAA,CAAA;kBACD,QAAA,GAAS,MAAA,UAAA,CAAA,GAAA,EAAA,QAAA;;AAEX,gBAAA,KAAK,IAAM,CAAX,EAAW;AAAA,cAAA,OAAA,CAAA,GAAA,CAAA,UAAA,EAAA,OAAA,CAAA,QAAA,CAAA;AAAA;;AACX,YAAA,MAAA,CAAK,WAAL,CAAS,QAAT,EAAS,KAAT;AACE;AACE;AACA;;WACE;WACA;AACD;gBACF,UAAA,GAAA,QAAA,CAAA,IAAA;;eACD,MAAA,QAAS,YAAA;AAEX,kBAAA,GAAA,GAAA,IAAA,CAAA,CAAA,CAAA;kBACE,KAAA,GAAA,IAAA,CAAA,CAAA;kBACE,QAAA,GAAM,MAAA,wBAA4B,CAAA,GAAA,EAAA,QAAA,EAAA,UAAA;;qBAClC,IAAA,GAAK;AAAA,cAAA,OAAU,CAAA,GAAV,CAAc,UAAd,EAA0B,OAAA,CAAA,QAAA,CAA1B;AAA0B;;mBAC7B,YAAA,UAAY;AACZ;AACD;AACF;;AACD;AACD;AACF;AA9CD;AAgEA,GAhpBK;AAkpBL;AACA;AACE;AACA;AACE;AAEF;AACE;AACE;AACA;AACE;AACA;AAEA;AAEA;AAAgB;AAChB;AACD;AACF;AACD;AAEF;;;cACE,0BAAA,OAAA,IAAA,cAAA,WAAA,IAAA,CAAA,SAAA,CAAA,IAAA,EAAA,IAAA,EAAA,CAAA,CAAA,IAxqBC;;cA0qBC,iFAA+B,MAAA,CAAA,cAAA;;qBAC7B,UAAM;YACN;WAEA;AAEA;;WAAgB;WAChB;AACD;gBACF,UAAA,GAAA,QAAA,CAAA,IAAA;;eACD,MAAA,QAAS,YAAA;AAGX,kBAAA,KAAS,GAAA,IAAA,CAAA,CAAA,CAAT;kBACE,YAAA,GAAA,OAAA,CAAA,IAAA,CAAA,IAAA,CAAA,IAAA,CAAA,MAAA,EAAA,KAAA,CAAA,kBAAA,CAAA;;qBACE,IAAA,GAAM;AAAA,cAAA,OAAA,CAAU,GAAV,CAAa,kCAAe,IAAA,wBAAA,KAAA,CAAA,IAAA,UAAA,YAAA,GAA5B;AAA4B;;qBAClC,GAAA,KAAK,CAAA;;yBACH,KAAA,CAAA,IAAA,IAAY;sBACZ,UAAM,KAAK;mBAEX;sBAEA;AAAgB;;kBAChB,iBAAO,GAAA,KAAA,CAAW,eAAX,IAA6B;kBACrC,WAAA,GAAA,KAAA,CAAA;kBACF,YAAA,GAAA,KAAA,CAAA;kBACD,OAAA,GAAS;;;;;;MAYX,KAAA;MACF,iBAAA;;;;MAIA,WAAA;;;;+EAIA,YAAiF;;;;CArBpE,CAyBb,QAzBa;AA0BP,kBAAA,MAAA,GAAA,OAAA,CAAA,IAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;AACJ,YAAA,EAAA,CAAA,SAAA,CAAA,MAAA,EAAA;AAAA,cAAA,SAAA,EAAA;AAAA,aAAA;AACF,YAAA,EAAA,CAAA,aAAA,CAAA,YAAA,EAAA,OAAA,EAAA,MAAA,EA5Ca;AA8CX;AAOF;AAEE;AAOF;AACA;AAEA;;AACE,WAAA,KAAA;WACA;AACE;AAEF;AACA,gBAAA,UAAK,GAAU,QAAA,CAAA,IAAA,CAAf;;eACE,MAAA,QAAA,YAAA;kBAEE,KAAA,GAAA,IAAK,CAAA,CAAA;kBACH,YAAA,GAAM,OAAM,CAAA,IAAO,CAAC,IAAR,CAAQ,IAAA,CAAA,MAAR,EAAQ,KAAA,CAAA,kBAAR,CAAA;;yBACZ,GAAA;AAAA,cAAA,OAAW,CAAA,GAAX,CAAc,kCAAQ,IAAA,wBAAA,KAAA,CAAA,IAAA,UAAA,YAAA,GAAtB;AAAsB;;wBACtB,GAAA,OAAM,CAAA,IAAA,CAAA,OAAA,CAAe,YAAf,CAAA;yBACN,QAAI;AAAK,cAAA,SAAK,EAAA;AAAV;4BAAY,KAAA,CAAA,MAAQ,cAAI,EAAA,CAAA,SAAA,CAAA;AAE5B;AACA;AACE;;AACK;;;YACL,IAAK,iEAAM,MAAA,CAAA,cAAA;AAAA,GAxwBhB;;;YA0wBG,aAAA,QAAM,CAAA,IAAA;sBACN,IAAA,CAAA,OAAA,CAAM,IAAA,CAAA,IAAA,CAAc,MAAM,CAAA,cAApB,EAAgC,CAAhC,CAAN;;sBACA,IAAA;wBAEA,GAAA,OAAM,CAAA,IAAO,CAAG,IAAV,CAAU,IAAA,CAAA,MAAV,EAAU,CAAV,CAAA;;;;;;;;AAMT;;;;;;;;;AAKA,SAAA,IAAA,OAAA,CAAY,CAAA,OAAA,EAAA,MAAA,KAAA;;;;eAI6D;;;;;AAI9E,YAAU,GAAC,GAAA;AAEH,QAAA,iBAAA,EAAA,IAFG;eAGH;AAHG,OAAX;;;AAKQ,QAAA,OAAA,CAAA,GAAA,CAAA,mBAA2B,IAAA,CAAA,MAAA,EAA3B;AAA2B;;;UAE3B,oBAAA,UAAA,OAAA,EAAuB,KAAvB,EAAuB,SAAvB,EAAuB,OAAvB,EAAuB;wBACvB;AAAA,UAAA,OAAA,CAAA,GAAA,CAAA,kCAAA,EAAuB;AAAA,YAAA,GAAA,EAAA,IAAA,CAAA,OAAA,CAAA,MAAA;AAAA,WAAvB;AAAuB;;oBACxB,QAAA;AACF;AAGH;AACA;AACA;;;YACE,KAAA,GAAA,IAAA,EAAA,CAAA,IAAA,CAAA,KAAA,CAAA,IAAA,EAAA,EAAA,EAAA,GAAA;cACE,QAAA;kBACA,GAAA,KAAK,CAAA;uBACH;qBACA,IADA;kBAEA;AAFA;;;AAGgB,QAAA,OAAA,CAAA,GAAA,CAAQ,WAAR,EAAY,gBAAA,CAAA,IAAA,CAAA,SAAA,CAAsC,qBAAwB,CAAA,MAAA,CAA9D,EAAwE,IAAxE,EAAwE,CAAxE,CAAA,CAAZ;AAA8F;;sBAE9G,IAAA,GAAA;qBACA,QAAG,CAAA,CAAA,EAAA,GAAA,EAAU,GAAV,EAAgB,KAAhB,KAAoB;sBACvB;AACD,QAAA,cAAA,CAAA,CAAA,CAAA,IAAA,CAAA,GAAA,IAAA;;cACF,SAAA,gBAAA;AACD,UAAA,QAAA,CAAA,WAAA,GAAS,CAAA,CAAA,IAAT;AACD;AACF;;AAED,UAAI,KAAK,IAAK,CAAd,EAAc;AAAA,QAAA,OAAA,CAAA,GAAA,CAAA,cAAA,EAAA,OAAA;AAAA;;AA8BT,UAAA,CACD,GAAA,CAAA,KADC,EACS;AACR,QAAA,QAAI,CAAA,QAAJ,GAAS,GAAA,CAAA,KAAT;AACE;;;YAID,EAAA,GAAA,QAAA,CAAA,QAAA,CAAA,GAAA,CAAA,MAAA;;UAED,KAAA,IAAM,GAAG;AAA2B,QAAA,OAAA,CAAA,GAAA,CAAA,yBAAA,EAAA;AAAA,UAAA,MAAA;AAAA,UAAA,EAAA,EAAA,OAAA,CAAA,EAAA;AAAA,SAAA;AAAA;;SAClC,UAAA;SACA,QAAA;SACD,YAAC;SAEF,WAAI;cAAY;AAEhB;AACA,GAxFD,CAAA;AAyFG;AACA;;;AACF,eAAE,QAAF,CAAE,MAAF,EAAE,EAAF,EAAE,QAAF,EAAE;WAEF,IAAA,GAAA;AAAA,IAAA,OAAA,CAAA,GAAA,CAAA,oBAAA,MAAA,KAAA;AAAA;;SACA,IAAA,OAAA,CAAE,CAAA,OAAA,EAAA,MAAA,KAAA;YACF,GAAA,QAAA,CAAA,QAAA,CAAA,GAAA,CAAA,MAAA;UACA,KAAA,GAAA,EAAA,CAAA;UACA,GAAA,GAAA,EAAM,CAAA;UAEN,QAAM,GAAA,EAAA,CAAM;UACZ,MAAA,GAAM,KAAA,CAAA;UACJ,OAAA,GAAA,EAAA,CAAA,QAAA,CAAa,MAAb,CAAiB,MAAjB,EAAiB,EAAA,CAAA,OAAjB,EAAiB,GAAjB;;aACA,IAAA,GAAA;AAAA,MAAA,OAAU,CAAI,GAAd,CAAc,WAAd,EAAc,gBAAA,CAAA,OAAA,CAAd;AAAc;;aACf,GAAC,IAAA,KAAA,CAAA,mBAAA,OAAA,EAAA;AAAA,MAAA,oBAAA,EAAA;AAAA,KAAA;UAEF,QAAI,GAAK,GAAA,CAAI,MAAJ,CAAM;gBAAE,GAAA,QAAW,CAAC,KAX3B;;UAaF,MAAA,GAAM,QAAO,CAAgB,aAAvB,CAAiC,MAAjC;;QACN,KAAA,IAAA,GAAA;AAAA,MAAA,OAAe,CAAA,GAAf,CAAqB,aAArB,EAAqC,OAAO,CAAA;AAAE,QAAA,IAAA,EAAA,QAAF;AAAE,QAAA,IAAA,EAAA,MAAA,CAAA,SAAF;AAAE,QAAA,IAAA,EAAA,MAAA,CAAA;AAAF,OAAA,CAA5C;AAA8C,KAd5C;;;aAgBA,IAAA,GAAA;AAAA,MAAA,OAAA,CAAc,GAAd,CAAiB,yBAAjB,EAA8B;AAAA,QAAA,MAAA;AAAA,QAAA,EAAA,EAAA,OAAA,CAAA,EAAA;AAAA,OAA9B;AAA8B;;OAE9B,eAAM;OACJ,cAAA,QAnBF;;OAqBF,kBAAG,MAAA,CAAA,UArBD;AAsBc;;OAEhB,WAAK;YACH;AACA,GA1BF;AA2BE;AAEI;;;wBACA,UAAO,UAAA;;AACR,IAAA,OAAA,CAAA,GAAA,CAAA,oBAAA,QAAA,KAAA;AAAA;;aACD,QAAA,CAAA,OAAA,EAAW,MAAX,KAAsB;gBACpB,UAAA;gBACA;AADA,mBAED,SAAA;eACD;mBACE,MAAA,qBAAsB,GAAA,aAAA,QAAA;AACvB;AAAM;;;AACL,QAAA,OAAO,CAAC,GAAR,CAAa,mBAAA,IAAA,CAAA,MAAA,EAAb;AAAa;;kBACd,IAAA,KAAA,CAAA,IAAA,EAAA;AAAA,QAAA,oBAAA,EAAA;AAAA,OAAA;oBACD,GAAA,GAAA,CAAA,MAAA,CAAc;YAChB,MAAE,GAAC,QAAA,CAAA,KAPA;;YAQJ,MAAA,GAAA,QAAA,CAAA,aAAA,CAAA,MAAA;YAED,OAAK,GAAI,MAAO,IAAA,MAAA,CAAA,aAAA,CAAA,OAAA;YACd,KAAA,GAAA,OAAS,IAAA,OAAW,CAAG;;UACxB,KAAA,IAAA,GAAA;AAAA,QAAA,OAAA,CAAA,GAAA,CAAA,SAAA,EAAA,OAAA,CAAA;AAAA,UAAA,IAAA,EAAA,QAAA;AAAA,UAAA,IAAA,EAAA,MAAA,CAAA,SAAA;AAAA,UAAA,IAAA,EAAA,MAAA,CAAA;AAAA,SAAA,CAAA;AAAA,OAZI;;;YAgBL,EAAA,GAAA,QAAW,CAAA,IAAX,CAAmB,GAAnB,CAAoB,QAApB;SACA,eAAS;SAAO,cAAO,MAAK,CAAA;SAE5B,kBAAa,MAAM,CAAA,UAnBd;AAqBL;;SACA,WAAG;AAEH,QAAA,QAAA,EAAA;AAFG;AAKP,MAAA,OAAC,CAAA,EAAA,CAAD;AACH;AAaD;AACA;AAEE;;;AAAgB,eAAO,UAAP,CAAY,QAAZ,EAAY,QAAZ,EAAsC;AAEtD,MAAA,KAAO,IAAI,CAAX,EAAW;AAAA,IAAA,OAAS,CAAA,GAAT,CAAkB,oBAAU,QAAA,KAA5B;AAA4B;;AACrC,SAAA,IAAA,OAAA,CAAW,CAAA,OAAA,EAAS,MAAT,KAAsB;AAEjC,UAAA,EAAA,GAAM,QAAQ,CAAE,IAAV,CAAW,GAAX,CAAmB,QAAnB,CAAN;AACA,UAAA,QAAS,GAAG,EAAG,CAAA,YAAf;AACA,UAAA,MAAM,GAAA,QAAa,CAAA,IAAnB,CAJiC;;AAKjC,UAAA,MAAM,GAAA,QAAa,CAAC,aAAd,CAAuB,MAAvB,CAAN;AAEA,UAAA,OAAM,GAAM,MAAG,IAAM,MAAO,CAAA,aAAP,CAAO,OAAP,CAArB;AAEA,UAAA,KAAM,GAAA,OAAU,IAAG,OAAS,CAAA,SAA5B;;QAEA,KAAI,IAAK,GAAA;AAAK,MAAA,OAAA,CAAA,GAAA,CAAA,SAAA,EAAA,OAAA,CAAA;AAAA,QAAA,IAAA,EAAA,QAAA;AAAA,QAAA,IAAA,EAAA,MAAA,CAAA,SAAA;AAAA,QAAA,IAAA,EAAA,MAAA,CAAA;AAAA,OAAA,CAAA;AAAA,KAXmB;;;OAajC,cAAY,MAAI,CAAA;OAIhB,kBAAiB,MAAI,CAAA,UAjBY;AAmBjC;;OACA,WAAS;AAAO,MAAA,QAAA,EAAA;AAAP;AAGT,IAAA,OAAA,CAAI,EAAJ,CAAA;AAAgB,GAvBhB,CAAA;AAwBA;;AACA,eAAG,sBAAH,CAAyB,QAAzB,EAAyB,QAAzB,EAAyB,UAAzB,EAAyB;MACrB,KAAA,IAAA,GAAA;AAAA,IAAA,OAAA,CAAA,GAAA,CAAA,oBAAoC,QAAA,KAApC;AAAoC;;AACxC,SAAA,IAAG,OAAH,CAAG,CAAA,OAAA,EAAkB,MAAlB,KAAyB;OACxB,SAAA,UAAA;AACA,MAAA,QAAA,EAAA;AADA,OAEJ,OAAG,GAAH,EAAW,IAAX,KAAc;AAEd,UAAA,GAAA,EAAO;AACN,QAAA,MAAA,CAAA,IAAA,KAAA,CAAA,qBAAA,GAAA,aAAA,QAAA,EAAA,CAAA,CAAA;AACJ;AAMD;;AACA,UAAA,KAAA,IAAA,CAAA,EAAA;AAAA,QAAA,OAAA,CAAA,GAAA,CAAA,mBAAA,IAAA,CAAA,MAAA,EAAA;AAAA,OAXkB;;;AAahB,YAAI,EAAK,GAAI,UAAC,CAAA,GAAD,CAAC,QAAD,CAAb;QAAgB,CAAA,aAAY;AAE5B,MAAA,OAAO,CAAA,EAAA,CAAP;AACE;AAGI,GAtBJ,CAAA;AAuBG;;AAEC,eAAA,wBAAA,CAAS,QAAT,EAAS,QAAT,EAAS,UAAT,EAAS;eACP,GAAA;AAAA,IAAA,OAAW,CAAA,GAAX,CACE,oBAAA,QAAwB,KAD1B;AAC0B;;aAE1B,QAAA,CAAA,OAAA,EAAO,MAAP,KAAO;AACR;YAED,GAAA,UAAa,CAAC,GAAd,CAAc,QAAd,EAHS;;YAKT;AAIA;AACA;;AACA,eAAA,wBAAA,CAAwB,QAAxB,EAAsC,QAAtC,EAA8C,UAA9C,EAA8C;WAC9C,IAAA,GAAM;AAAA,IAAA,OAAO,CAAG,GAAV,CAAU,oBAAiB,QAAc,KAAzC;AAAkD,GADV;;;SAI9C,IAAA,OAAA,CAAS,CAAA,OAAA,EAAK,MAAL,KAAK;gBAAE,CAAA,WAAY;;YAE5B;YACA,CAAA,IAAA,KAAA,CAAW,gBAAc,QAAI,mBAA7B,CAAA;AACA;AAEA,KANc;AAQd;;;YACA,GAAA,UAAA,CAAA,GAAA,CAAA,QAAA,EATc;;OAYZ,kBAAQ;YACT;AAED,GAfA;AAgBF;;AAEJ,SAAG,qBAAH,CAAG,MAAH,EAAG;AACJ,QAAA,EAAA,GAAA,EAAA;;AAYD,OAAA,MAAA,CAAA,IAAA,MAAA,EAAA;AACA,QAAA,CAAA,GAAA,MAAA,CAAA,CAAA,CAAA;AACA,IAAA,CAAK,GAAA,0BAA6B,CAAA,CAAA,CAAlC;;AACE,QAAI,CAAA,CAAA,QAAJ,EAAc;QAAE,WAAW,qBAAqB,CAAA,CAAA,CAAA,QAAA;AAEhD;;OACE,KAAA;AAEA;;AACA,SAAA,EAAA;AACA;;AACA,SAAA,0BAAA,CAA0B,KAA1B,EAAiC;QACjC,EAAA,GAAA;;OAEA,MAAI,QAAS,OAAC;QAAE,KAAA,CAAA,IAAA,CAAA,KAAY,EAAZ,IAAY,KAAW,CAAA,IAAA,CAAX,IAAqB,MAAM;QAEnD,CAAA,IAAA,IAAA,KAAA,CAAA,IAAA;AACJ;AACA;;AACI,SAAA,EAAA;AACA;;AAgBN,SAAI,cAAJ,CAAc,MAAd,EAAc,EAAd,EAAc,KAAd,EAAc;OAAE,GAAA,KAAO,IAAI;;AAE3B,OAAA,IAAO,CAAA,GAAI,CAAX,EAAW,GAAA,GAAS,MAAA,CAAO,MAA3B,EAAmC,CAAA,GAAI,GAAvC,EAAuC,CAAA,EAAvC,EAAuC;AACrC,UAAE,CAAC,GAAA,MACD,CAAA,CAAA,CADF;UAGI,GAAA,QAAQ;;SACT,CAAA,UACM;AACL,MAAA,cAAO,CAAE,CAAA,CAAA,QAAF,EAAE,EAAF,EAAE,KAAA,GAAA,CAAF,CAAP;AACE;AAGA;AACD;AAEe;AAEhB;AACA;AACA;AAEA;AACF;;;;"}