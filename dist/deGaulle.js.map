{"version":3,"file":"deGaulle.js","sources":["../js/src/index.js"],"sourcesContent":["//\r\n//\r\n//\r\nimport nomnom from '@gerhobbelt/nomnom';\r\nimport slug from '@gerhobbelt/slug';\r\nimport yaml from 'js-yaml';\r\nimport MarkDown from '@gerhobbelt/markdown-it';\r\nimport mdPluginCollective from 'markdown-it-dirty-dozen';\r\nimport { URL, fileURLToPath } from 'url';\r\n// see https://nodejs.org/docs/latest-v13.x/api/esm.html#esm_no_require_exports_module_exports_filename_dirname\r\nconst __filename = fileURLToPath(import.meta.url);\r\nconst __dirname = path.dirname(__filename);\r\nconst pkg = JSON.parse(fs.readFileSync(path.normalize(path.join(__dirname, '../package.json')), 'utf8'));\r\nimport cheerio from 'cheerio';\r\nimport glob from '@gerhobbelt/glob';\r\nimport assert from 'assert';\r\nimport _ from 'lodash';\r\nimport path from 'path';\r\nimport fs from 'fs';\r\nlet DEBUG = 1;\r\nconst markdownTokens = {};\r\nconst config = {\r\n    docTreeBasedir: null,\r\n    destinationPath: null,\r\n    outputDirRelativePath: null\r\n};\r\nexport default function main() {\r\n    nomnom.script('deGaulle');\r\n    nomnom\r\n        .command('build')\r\n        .option('debug', {\r\n        abbr: 'd',\r\n        flag: false,\r\n        'default': 0,\r\n        help: 'Print debugging info'\r\n    })\r\n        .option('config', {\r\n        abbr: 'c',\r\n        'default': 'config.js',\r\n        help: 'JS script file with custom handlers'\r\n    })\r\n        .option('output', {\r\n        abbr: 'o',\r\n        flag: false,\r\n        help: 'directory to write results to'\r\n    })\r\n        .callback(function (opts, cmd) {\r\n        try {\r\n            buildWebsite(opts, cmd);\r\n        }\r\n        catch (ex) {\r\n            console.error(`ERROR: ${ex.message}\\n\\nException:\\n${ex}`);\r\n            process.exit(5);\r\n        }\r\n    })\r\n        .help('build website from sources');\r\n    nomnom\r\n        .command('sanity')\r\n        .option('debug', {\r\n        abbr: 'd',\r\n        flag: false,\r\n        help: 'Print debugging info'\r\n    })\r\n        .option('config', {\r\n        abbr: 'c',\r\n        'default': 'config.js',\r\n        help: 'JS script file with custom handlers'\r\n    })\r\n        .option('outfile', {\r\n        abbr: 'o',\r\n        help: 'file to write results to'\r\n    })\r\n        .callback(function (opts, cmd) {\r\n        try {\r\n            sanityCheck(opts, cmd);\r\n        }\r\n        catch (ex) {\r\n            console.error(`ERROR: ${ex.message}\\n\\nException:\\n${ex}`);\r\n            process.exit(5);\r\n        }\r\n    })\r\n        .help('run the sanity tests');\r\n    nomnom\r\n        .nocommand()\r\n        .option('debug', {\r\n        abbr: 'd',\r\n        flag: false,\r\n        'default': 0,\r\n        help: 'Print debugging info'\r\n    })\r\n        .option('config', {\r\n        abbr: 'c',\r\n        'default': 'config.js',\r\n        help: 'JS script file with custom drivers'\r\n    })\r\n        .option('version', {\r\n        flag: true,\r\n        help: 'print version and exit',\r\n        callback: function () {\r\n            return `version ${pkg.version}`;\r\n        }\r\n    })\r\n        .callback(function (opts, cmd) {\r\n        try {\r\n            buildWebsite(opts, cmd);\r\n        }\r\n        catch (ex) {\r\n            console.error(`ERROR: ${ex.message}\\n\\nException:\\n${ex}`);\r\n            process.exit(5);\r\n        }\r\n    });\r\n    nomnom.parse();\r\n}\r\n// -- done --\r\nfunction unixify(path) {\r\n    return path.replace(/\\\\/g, '/');\r\n}\r\nfunction absSrcPath(rel) {\r\n    const p = path.join(config.docTreeBasedir, rel);\r\n    return unixify(path.resolve(p));\r\n}\r\nfunction absDstPath(rel) {\r\n    if (!config.destinationPath) {\r\n        throw new Error('Internal error: used too early');\r\n    }\r\n    const p = path.join(config.destinationPath, rel);\r\n    return unixify(path.resolve(p));\r\n}\r\nconst SANE_MAX_STRING_LENGTH = 2 * 120;\r\nfunction limitDebugOutput(str) {\r\n    if (str && str.length > SANE_MAX_STRING_LENGTH) {\r\n        str = `${str.slice(0, SANE_MAX_STRING_LENGTH - 20)}...\\n  ... (length: ${str.length})`;\r\n    }\r\n    return str;\r\n}\r\nfunction limitDebugOutput4Map(collection) {\r\n    if (collection instanceof Map) {\r\n        const rv = new Map();\r\n        collection.forEach((value, key) => {\r\n            rv.set(key, showRec(value));\r\n        });\r\n        return rv;\r\n    }\r\n    return collection;\r\n}\r\nfunction limitDebugOutput4Collection(allFiles) {\r\n    if (allFiles) {\r\n        const rv = {};\r\n        for (const type in allFiles) {\r\n            const m = allFiles[type];\r\n            rv[type] = limitDebugOutput4Map(m);\r\n        }\r\n        return rv;\r\n    }\r\n    return allFiles;\r\n}\r\nfunction showRec(rec) {\r\n    if (rec) {\r\n        const rv = Object.assign({}, rec);\r\n        for (const key in rv) {\r\n            const attr = rv[key];\r\n            if (typeof attr === 'string' && attr.length > SANE_MAX_STRING_LENGTH) {\r\n                rv[key] = limitDebugOutput(attr);\r\n            }\r\n        }\r\n        return rv;\r\n    }\r\n    return rec;\r\n}\r\nfunction slugify4Path(filePath) {\r\n    return slug(filePath, {\r\n        mode: 'path'\r\n    });\r\n}\r\nfunction slugify4TitleId(title) {\r\n    return slug(title, {\r\n        mode: 'pretty' // or should we use uslug?\r\n    });\r\n}\r\nfunction slugify4FileName(filePath, maxLength = 64) {\r\n    const hash = cyrb53hash(filePath);\r\n    const hashStr = hash.toString(16);\r\n    const basename = path.basename(filePath) + path.extname(filePath);\r\n    const nameslug = slug(basename, {\r\n        mode: 'path'\r\n    });\r\n    const dir = path.dirname(filePath);\r\n    const dirslug = slug(dir, {\r\n        mode: 'path'\r\n    });\r\n    const dirWords = dirslug.split('-');\r\n    const nameWords = nameslug.split('-');\r\n    let n = maxLength - hashStr.length;\r\n    const w = [];\r\n    let i = 0;\r\n    while (n >= 1 + nameWords[i].length && i < nameWords.length) {\r\n        n -= 1 + nameWords[i].length;\r\n        w.push(nameWords[i++]);\r\n    }\r\n    w.push(hashStr);\r\n    i = dirWords.length - 1;\r\n    while (n >= 1 + dirWords[i].length && i >= 0) {\r\n        n -= 1 + dirWords[i].length;\r\n        w.unshift(dirWords[i--]);\r\n    }\r\n    const sl = w.join('-');\r\n    return sl;\r\n}\r\n// CYRB53 hash (NOT a secure hash)\r\n// as per https://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript/52171480#52171480\r\n// (re `number` type: see https://spin.atomicobject.com/2018/11/05/using-an-int-type-in-typescript/ - deemed too much cost & effort right now)\r\nfunction cyrb53hash(str, seed = 0) {\r\n    let h1 = 0xdeadbeef ^ seed, h2 = 0x41c6ce57 ^ seed;\r\n    for (let i = 0, ch; i < str.length; i++) {\r\n        ch = str.charCodeAt(i);\r\n        h1 = Math.imul(h1 ^ ch, 2654435761);\r\n        h2 = Math.imul(h2 ^ ch, 1597334677);\r\n    }\r\n    h1 = Math.imul(h1 ^ (h1 >>> 16), 2246822507) ^ Math.imul(h2 ^ (h2 >>> 13), 3266489909);\r\n    h2 = Math.imul(h2 ^ (h2 >>> 16), 2246822507) ^ Math.imul(h1 ^ (h1 >>> 13), 3266489909);\r\n    return 4294967296 * (2097151 & h2) + (h1 >>> 0);\r\n}\r\nfunction readOptionalTxtConfigFile(rel) {\r\n    const p = absSrcPath(rel);\r\n    if (fs.existsSync(p)) {\r\n        const src = fs.readFileSync(p, 'utf8');\r\n        // - split into lines\r\n        // - filter out any lines which don't have an '='\r\n        // - split each line across the initial '=' in there.\r\n        // - turn this into a hash table?\r\n        const lines = src.split(/[\\r\\n]/g);\r\n        const linesarr = lines.filter((l) => l.trim().length > 1 && l.includes('=')).map((l) => {\r\n            let parts = l.split('=');\r\n            if (parts.length !== 2) {\r\n                throw new Error(`config line in ${rel} is expected to have only one '='`);\r\n            }\r\n            parts = parts.map((l) => l.trim());\r\n            return parts;\r\n        });\r\n        const rv = {};\r\n        linesarr.forEach((l) => {\r\n            rv[l[0]] = l[1];\r\n        });\r\n        return rv;\r\n    }\r\n    return {};\r\n}\r\nfunction myCustomPageNamePostprocessor(spec) {\r\n    // clean up unwanted characters\r\n    spec = spec.replace(/ :: /g, '/');\r\n    spec = spec.replace(/ --* /g, '/');\r\n    spec = _.deburr(spec).trim();\r\n    // // normalize case\r\n    //spec = spec.toLowerCase();\r\n    spec = spec\r\n        .replace(/[^\\w\\d\\s\\/_-]/g, '_');\r\n    spec = spec\r\n        .replace(/__+/g, '_');\r\n    spec = spec\r\n        .replace(/\\s+/g, ' ');\r\n    if (DEBUG >= 7)\r\n        console.log('myCustomPageNamePostprocessor STAGE 1', spec);\r\n    spec = spec\r\n        .replace(/_-_/g, '_');\r\n    spec = spec\r\n        .replace(/ - /g, ' ');\r\n    spec = spec\r\n        .replace(/[ _]* [ _]*/g, ' ');\r\n    if (DEBUG >= 7)\r\n        console.log('myCustomPageNamePostprocessor STAGE 2', spec);\r\n    spec = spec\r\n        .replace(/(^|\\/)[ _]+/g, '$1');\r\n    spec = spec\r\n        .replace(/[ _]+($|\\/)/g, '$1');\r\n    if (DEBUG >= 7)\r\n        console.log('myCustomPageNamePostprocessor STAGE 3', spec);\r\n    spec = spec\r\n        .replace(/ /g, '_');\r\n    if (DEBUG >= 7)\r\n        console.log('myCustomPageNamePostprocessor STAGE 4', spec);\r\n    return spec;\r\n}\r\n// ripped from linkinator and then tweaked: which HTML tag has URLs in which attributes?\r\nconst linksAttr = {\r\n    background: ['body'],\r\n    cite: ['blockquote', 'del', 'ins', 'q'],\r\n    data: ['object'],\r\n    href: ['a', 'area', 'embed', 'link'],\r\n    icon: ['command'],\r\n    longdesc: ['frame', 'iframe'],\r\n    manifest: ['html'],\r\n    content: ['meta'],\r\n    poster: ['video'],\r\n    pluginspage: ['embed'],\r\n    pluginurl: ['embed'],\r\n    src: [\r\n        'audio',\r\n        'embed',\r\n        'frame',\r\n        'iframe',\r\n        'img',\r\n        'input',\r\n        'script',\r\n        'source',\r\n        'track',\r\n        'video'\r\n    ],\r\n    srcset: ['img', 'source']\r\n};\r\nfunction getLinks(document, baseUrl) {\r\n    const $ = document;\r\n    let realBaseUrl = baseUrl;\r\n    const base = $('base[href]');\r\n    if (base.length) {\r\n        // only first <base> by specification\r\n        const htmlBaseUrl = base.first().attr('href');\r\n        realBaseUrl = getBaseUrl(htmlBaseUrl, baseUrl);\r\n    }\r\n    const links = new Array();\r\n    const attrs = Object.keys(linksAttr);\r\n    for (const attr of attrs) {\r\n        const elements = linksAttr[attr].map(tag => `${tag}[${attr}]`).join(',');\r\n        $(elements).each((i, ele) => {\r\n            const element = ele;\r\n            if (!element.attribs) {\r\n                return;\r\n            }\r\n            const values = parseAttr(attr, element.attribs[attr]);\r\n            // ignore href properties for link tags where rel is likely to fail\r\n            const relValuesToIgnore = ['dns-prefetch', 'preconnect'];\r\n            if (element.tagName === 'link' &&\r\n                relValuesToIgnore.includes(element.attribs.rel)) {\r\n                return;\r\n            }\r\n            // Only for <meta content=\"\"> tags, only validate the url if\r\n            // the content actually looks like a url\r\n            if (element.tagName === 'meta' && element.attribs.content) {\r\n                try {\r\n                    new URL(element.attribs.content);\r\n                }\r\n                catch (e) {\r\n                    return;\r\n                }\r\n            }\r\n            for (const v of values) {\r\n                if (v) {\r\n                    const link = parseLink(v, realBaseUrl, element, attr);\r\n                    links.push(link);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    return links;\r\n}\r\nfunction getBaseUrl(htmlBaseUrl, oldBaseUrl) {\r\n    if (isAbsoluteUrl(htmlBaseUrl)) {\r\n        return htmlBaseUrl;\r\n    }\r\n    const url = new URL(htmlBaseUrl, oldBaseUrl);\r\n    url.hash = '';\r\n    return url.href;\r\n}\r\nfunction isAbsoluteUrl(url) {\r\n    // Don't match Windows paths\r\n    if (/^[a-zA-Z]:\\\\/.test(url)) {\r\n        return false;\r\n    }\r\n    // Scheme: https://tools.ietf.org/html/rfc3986#section-3.1\r\n    // Absolute URL: https://tools.ietf.org/html/rfc3986#section-4.3\r\n    return /^[a-zA-Z][a-zA-Z\\d+\\-.]*:/.test(url);\r\n}\r\nfunction parseAttr(name, value) {\r\n    switch (name) {\r\n        case 'srcset':\r\n            return value\r\n                .split(',')\r\n                .map((pair) => pair.trim().split(/\\s+/)[0]);\r\n        default:\r\n            return [value];\r\n    }\r\n}\r\nfunction parseLink(link, baseUrl, node, attr) {\r\n    try {\r\n        const url = new URL(link, baseUrl);\r\n        url.hash = '';\r\n        return { node, attr, link, url };\r\n    }\r\n    catch (error) {\r\n        return { node, attr, link, error };\r\n    }\r\n}\r\nasync function loadConfigScript(configScript) {\r\n    if (configScript) {\r\n        // https://stackoverflow.com/questions/42453683/how-to-reject-in-async-await-syntax\r\n        if (DEBUG >= 1)\r\n            console.log(`loadConfigScript(${configScript})`);\r\n        if (!path.isAbsolute(configScript)) {\r\n            // make sure `import` sees a './'-based relative path, or it barf a hairball as it will treat the base directory as a package identifier instead!\r\n            configScript = unixify(path.join(process.cwd(), configScript));\r\n        }\r\n        if (DEBUG >= 1)\r\n            console.log(`loadConfigScript(prepped: '${configScript}')`);\r\n        try {\r\n            const processors = await import('file://' + configScript);\r\n            return processors;\r\n        }\r\n        catch (err) {\r\n            console.error('######## ERROR: ', err);\r\n            //throw new AggregateError([ err ], `Cannot open/load config script file '${configScript}'`);\r\n            throw new Error(`Cannot open/load config script file '${configScript}'. Error: ${err}`);\r\n        }\r\n    }\r\n    else {\r\n        return new Promise((resolve, reject) => {\r\n            const processors = {};\r\n            resolve(processors);\r\n        });\r\n    }\r\n}\r\nasync function sanityCheck(opts, command) {\r\n    console.log(`sanityCheck: command: ${command || '<no-command>'}, opts: ${JSON.stringify(opts, null, 2)}`);\r\n    DEBUG = Math.max(DEBUG, Number.isFinite(+opts.debug) ? +opts.debug : opts.debug ? 1 : 0);\r\n    console.log('DEBUG = ', DEBUG);\r\n    return new Promise((resolve, reject) => {\r\n        resolve(0);\r\n    });\r\n}\r\nasync function buildWebsite(opts, command) {\r\n    console.log(`buildWebsite: command: ${command || '<no-command>'}, opts: ${JSON.stringify(opts, null, 2)}`);\r\n    DEBUG = Math.max(DEBUG, Number.isFinite(+opts.debug) ? +opts.debug : opts.debug ? 1 : 0);\r\n    console.log('DEBUG = ', DEBUG);\r\n    const paths = opts._.slice(command ? 1 : 0);\r\n    const minPathsCount = 1;\r\n    if (!paths || paths.length < minPathsCount) {\r\n        throw new Error('Must specify at least one file path as starting point. None were specified.');\r\n    }\r\n    // load the config script, iff it exists:\r\n    const configScript = opts.config;\r\n    let processors = null;\r\n    try {\r\n        processors = await loadConfigScript(configScript);\r\n    }\r\n    catch (err) {\r\n        console.error('##### ERROR while importing config script. (Will continue with a default script.)\\nError: ', err);\r\n        processors = await loadConfigScript(null);\r\n    }\r\n    let firstEntryPointPath = paths[0];\r\n    // make sure we start with an absolute path; everything will derived off this one.\r\n    if (!path.isAbsolute(firstEntryPointPath)) {\r\n        firstEntryPointPath = path.join(process.cwd(), firstEntryPointPath);\r\n    }\r\n    firstEntryPointPath = unixify(path.normalize(firstEntryPointPath));\r\n    if (DEBUG >= 1)\r\n        console.log('firstEntryPointPath = ', firstEntryPointPath);\r\n    let entryStats = fs.lstatSync(firstEntryPointPath);\r\n    if (entryStats && entryStats.isDirectory()) {\r\n        // check if any of the default entry points exist:\r\n        // - index.md\r\n        // - index.html\r\n        // - README.md\r\n        let indexFile;\r\n        let indexFilePriority = 0;\r\n        let scanPath = path.join(firstEntryPointPath, '*.{md,htm,html}');\r\n        scanPath = unixify(scanPath);\r\n        if (DEBUG >= 1)\r\n            console.log('scanPath:', scanPath);\r\n        const files = glob.sync(scanPath, {\r\n            nosort: true,\r\n            nomount: true,\r\n            nounique: false,\r\n            nocase: true,\r\n            nodir: true,\r\n            nobrace: false,\r\n            gitignore: true\r\n        });\r\n        if (DEBUG >= 3)\r\n            console.log(`root point DIR --> scan: ${JSON.stringify(files, null, 2)}`);\r\n        const filelist = files || [];\r\n        for (const f of filelist) {\r\n            if (DEBUG >= 10)\r\n                console.log('Loop!', { f });\r\n            const basename = path.basename(f.toLowerCase());\r\n            if (DEBUG >= 7)\r\n                console.log('Can this serve as root?', basename);\r\n            switch (basename) {\r\n                case 'index.md':\r\n                    if (indexFilePriority < 10) {\r\n                        indexFilePriority = 10;\r\n                        indexFile = f;\r\n                    }\r\n                    break;\r\n                case 'index.htm':\r\n                case 'index.html':\r\n                    if (indexFilePriority < 5) {\r\n                        indexFilePriority = 5;\r\n                        indexFile = f;\r\n                    }\r\n                    break;\r\n                case 'readme.md':\r\n                    if (DEBUG >= 7)\r\n                        console.log('Hit!', basename);\r\n                    if (indexFilePriority < 1) {\r\n                        indexFilePriority = 1;\r\n                        indexFile = f;\r\n                    }\r\n                    if (DEBUG >= 7)\r\n                        console.log('Continue!', indexFile);\r\n                    break;\r\n                default:\r\n                    if (DEBUG >= 1)\r\n                        console.log('WUT?!', basename);\r\n                    break;\r\n            }\r\n        }\r\n        if (DEBUG >= 10)\r\n            console.log('Loop end!', indexFile);\r\n        if (DEBUG >= 3)\r\n            console.log('root scan -> indexFile', indexFile);\r\n        if (indexFile) {\r\n            firstEntryPointPath = unixify(path.resolve(indexFile));\r\n            if (DEBUG >= 1)\r\n                console.log('root scan -> firstEntryPointPath', firstEntryPointPath);\r\n            entryStats = fs.lstatSync(firstEntryPointPath);\r\n        }\r\n        else {\r\n            throw new Error(`Could not find a default entry point file (index.md, index.html or README.md) in the entry point directory ${firstEntryPointPath} (${scanPath})`);\r\n        }\r\n    }\r\n    if (!entryStats) {\r\n        throw new Error(`entry point does not exist: ${firstEntryPointPath}`);\r\n    }\r\n    if (!entryStats.isFile()) {\r\n        throw new Error(`entry point is not a file: ${firstEntryPointPath}`);\r\n    }\r\n    config.docTreeBasedir = path.dirname(firstEntryPointPath);\r\n    let outputDirPath = paths[1] || path.join(config.docTreeBasedir, (!config.docTreeBasedir.endsWith('docs') ? '../docs' : '../' + path.basename(config.docTreeBasedir) + '-output'));\r\n    // make sure we start with an absolute path; everything will derived off this one.\r\n    if (!path.isAbsolute(outputDirPath)) {\r\n        outputDirPath = path.join(process.cwd(), outputDirPath);\r\n    }\r\n    outputDirPath = unixify(path.normalize(outputDirPath));\r\n    if (DEBUG >= 1)\r\n        console.log('outputDirPath = ', outputDirPath);\r\n    config.destinationPath = outputDirPath;\r\n    config.outputDirRelativePath = unixify(path.relative(config.docTreeBasedir, config.destinationPath));\r\n    if (DEBUG >= 2)\r\n        console.log('config:', config);\r\n    const rv_mapping_def = {\r\n        markdown: [\r\n            'md',\r\n            'markdown'\r\n        ],\r\n        html: [\r\n            'html',\r\n            'htm'\r\n        ],\r\n        js: [\r\n            'js',\r\n            'mjs',\r\n            'ejs',\r\n            'cjs',\r\n            'ts',\r\n            'coffee'\r\n        ],\r\n        css: [\r\n            'css',\r\n            'scss',\r\n            'less',\r\n            'styl',\r\n            'stylus'\r\n        ],\r\n        image: [\r\n            'png',\r\n            'gif',\r\n            'jpg',\r\n            'jpeg',\r\n            'tiff',\r\n            'bmp',\r\n            'svg',\r\n            'psd',\r\n            'ai',\r\n            'webp'\r\n        ],\r\n        movie: [\r\n            'mkv',\r\n            'mp4',\r\n            'avi',\r\n            'mov',\r\n            'flv',\r\n            'webm'\r\n        ],\r\n        archive: [\r\n            'zip',\r\n            'rar',\r\n            'gz',\r\n            'bz2',\r\n            '7z'\r\n        ],\r\n        distro: [\r\n            'exe',\r\n            'msi'\r\n        ]\r\n    };\r\n    const rv_mapping_bin_content = {\r\n        png: true,\r\n        gif: true,\r\n        jpg: true,\r\n        jpeg: true,\r\n        tiff: true,\r\n        bmp: true,\r\n        svg: false,\r\n        psd: true,\r\n        ai: true,\r\n        mkv: true,\r\n        mp4: true,\r\n        avi: true,\r\n        mov: true,\r\n        flv: true,\r\n        webm: true,\r\n        webp: true,\r\n        zip: true,\r\n        rar: true,\r\n        gz: true,\r\n        bz2: true,\r\n        '7z': true,\r\n        exe: true,\r\n        msi: true\r\n    };\r\n    const rv_mapping = new Map();\r\n    for (const n in rv_mapping_def) {\r\n        const a = rv_mapping_def[n];\r\n        if (DEBUG >= 4)\r\n            console.log('key n', { n, a });\r\n        for (const b of a) {\r\n            if (DEBUG >= 4)\r\n                console.log('map n -> b', { n, b });\r\n            rv_mapping.set('.' + b, n);\r\n        }\r\n    }\r\n    if (DEBUG >= 3)\r\n        console.log('######################### mapping ##########################\\n', rv_mapping, '\\n###########################################');\r\n    // now scan the entire tree: collect potential files for comparison & treatment\r\n    //\r\n    // Produces an array of categories, which each are an array of file records,\r\n    // where each file record has this format:\r\n    //\r\n    // {\r\n    //   path,        -- full path to file\r\n    //   nameLC       -- lowercased filename\r\n    //   ext          -- lowercased filename extension\r\n    //   relativePath --  relative path to config.docTreeBasedir\r\n    // }\r\n    //\r\n    async function collectAllFiles() {\r\n        let scanPath = path.join(config.docTreeBasedir, '**/*');\r\n        scanPath = unixify(scanPath);\r\n        if (DEBUG >= 1)\r\n            console.log('scanPath:', scanPath);\r\n        return new Promise((resolve, reject) => {\r\n            glob(scanPath, {\r\n                nosort: true,\r\n                nomount: true,\r\n                nounique: false,\r\n                nocase: true,\r\n                nodir: true,\r\n                nobrace: false,\r\n                gitignore: true\r\n            }, function processGlobResults(err, files) {\r\n                if (err) {\r\n                    reject(new Error(`glob scan error: ${err}`));\r\n                    return;\r\n                }\r\n                if (DEBUG >= 1)\r\n                    console.log(`root point DIR --> scan: ${JSON.stringify(files, null, 2)}`);\r\n                const rv = {\r\n                    markdown: new Map(),\r\n                    html: new Map(),\r\n                    css: new Map(),\r\n                    js: new Map(),\r\n                    image: new Map(),\r\n                    movie: new Map(),\r\n                    archive: new Map(),\r\n                    distro: new Map(),\r\n                    misc: new Map(),\r\n                    _: new Map()\r\n                };\r\n                for (const p of files || []) {\r\n                    AddFileToCollection(p, rv);\r\n                }\r\n                resolve(rv);\r\n            });\r\n        });\r\n    }\r\n    function AddFileToCollection(p, collection) {\r\n        const f = unixify(path.resolve(p));\r\n        if (DEBUG >= 9)\r\n            console.log('hacky fix for glob output not being abs path on Windows:', { 'in': p, out: f });\r\n        const fname = path.basename(f);\r\n        // check if the file is to be ignored:\r\n        let ignore = false;\r\n        ['CNAME', '.nojekyll', /\\.vcxproj/, /^site-builder\\./, /^Makefile$/].forEach((f) => {\r\n            if (typeof f === 'string' && f === fname) {\r\n                ignore = true;\r\n            }\r\n            else if (f instanceof RegExp && f.test(fname)) {\r\n                ignore = true;\r\n            }\r\n        });\r\n        if (!ignore) {\r\n            const ext = path.extname(fname).toLowerCase();\r\n            const el = {\r\n                path: f,\r\n                nameLC: fname.toLowerCase(),\r\n                ext: ext,\r\n                relativePath: unixify(path.relative(config.docTreeBasedir, f)),\r\n                destinationRelPath: null,\r\n                RawContent: null,\r\n                contentIsBinary: rv_mapping_bin_content[ext] || false\r\n            };\r\n            const cat = rv_mapping.get(ext) || 'misc';\r\n            collection[cat].set(f, el);\r\n            collection._.set(f, el);\r\n        }\r\n        else {\r\n            console.log(`INFO: Ignoring file '${f}'.`);\r\n        }\r\n    }\r\n    // async invocation, but don't wait for it yet:\r\n    const scan = collectAllFiles();\r\n    const md = MarkDown({\r\n        // Enable HTML tags in source\r\n        html: true,\r\n        // Use '/' to close single tags (<br />).\r\n        xhtmlOut: false,\r\n        // Convert '\\n' in paragraphs into <br>\r\n        breaks: false,\r\n        // CSS language prefix for fenced blocks. Can be useful for external highlighters.\r\n        langPrefix: 'language-',\r\n        // Autoconvert URL-like text to links\r\n        linkify: true,\r\n        // highSecurity:\r\n        // - false:           lower protection against XSS/Unicode-Homologue/etc. attacks via the input MarkDown.\r\n        //                    This setting assumes you own or at least trust the Markdown\r\n        //                    being fed to MarkDonw-It. The result is a nicer render.\r\n        // - true (default):  maximum protection against XSS/Unicode-Homologue/etc. attacks via the input MarkDown.\r\n        //                    This is the default setting and assumes you have no control or absolute trust in the Markdown\r\n        //                    being fed to MarkDonw-It. Use this setting when using markdown-it as part of a forum or other\r\n        //                    website where more-or-less arbitrary users can enter and feed any MarkDown to markdown-it.\r\n        //\r\n        // See https://en.wikipedia.org/wiki/Internationalized_domain_name for details on homograph attacks, for example.\r\n        highSecurity: false,\r\n        // Enable some language-neutral replacement + quotes beautification\r\n        typographer: true,\r\n        // Double + single quotes replacement pairs, when typographer enabled,\r\n        // and smartquotes on. Could be either a String or an Array.\r\n        //\r\n        // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\r\n        // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\r\n        quotes: '“”‘’',\r\n        // Highlighter function. Should return escaped HTML,\r\n        // or '' if the source string is not changed and should be escaped externally.\r\n        // If result starts with <pre... internal wrapper is skipped.\r\n        highlight: function () {\r\n            console.error('highligh callback invoked!');\r\n            return '';\r\n        } // Configure default attributes for given tags\r\n        //default_attributes: { a: [['rel', 'nofollow']] }\r\n    });\r\n    // augment the md instance for use with the markdown_it_include plugin:\r\n    //md.getIncludeRootDir = ...\r\n    if (DEBUG >= 2)\r\n        console.log('setting up markdown-it:', mdPluginCollective, typeof mdPluginCollective.use_dirty_dozen);\r\n    mdPluginCollective.use_dirty_dozen(md, {\r\n        abbr: {\r\n            abbreviations: readOptionalTxtConfigFile('.deGaulle/abbr-abbreviations.txt'),\r\n            links: readOptionalTxtConfigFile('.deGaulle/abbr-links.txt'),\r\n            emphasis: readOptionalTxtConfigFile('.deGaulle/abbr-emphasis-phrases.txt')\r\n        },\r\n        attrs: true,\r\n        anchor: {\r\n            permalink: true,\r\n            permalinkBefore: true,\r\n            permalinkSymbol: `\n        <svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\">\n          <path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path>\n        </svg>`,\r\n            slugify: function (el_title) {\r\n                return slugify4TitleId(el_title);\r\n            }\r\n        },\r\n        //githubHeadings: false,\r\n        footnote: {\r\n            atDocumentEnd: false\r\n        },\r\n        furigana: true,\r\n        frontMatter: {\r\n            callback: function (meta, token, state) {\r\n                try {\r\n                    const doc = yaml.load(meta);\r\n                    token.meta = doc; // override token.meta with the parsed object\r\n                    console.log(\"parsed YAML:\", doc);\r\n                }\r\n                catch (e) {\r\n                    console.log(e);\r\n                }\r\n            }\r\n        },\r\n        include: {\r\n            root: '/includes/',\r\n            getRootDir: (options, state, startLine, endLine) => {\r\n                console.log('state:', { state });\r\n                return state.env.getIncludeRootDir(options, state, startLine, endLine);\r\n            }\r\n        },\r\n        wikilinks: {\r\n            postProcessPageName: function (pageName) {\r\n                const rv = myCustomPageNamePostprocessor(pageName);\r\n                if (DEBUG >= 2)\r\n                    console.log('wikilink transform:', { 'in': pageName, out: rv });\r\n                return rv;\r\n            }\r\n        },\r\n        // [[toc]]\r\n        tableOfContents: false,\r\n        // @[toc](Title)\r\n        toc: true,\r\n        // @[toc]               -- no title...\r\n        tocAndAnchor: false,\r\n        // ${toc} | [[toc]]     -- but we removed that last version by specifying a custom placeholder here:\r\n        tocDoneRight: {\r\n            placeholder: '(\\\\$\\\\{toc\\\\})',\r\n            slugify: function (el_title) {\r\n                return slugify4TitleId(el_title);\r\n            }\r\n        }\r\n    });\r\n    const allFiles = await scan;\r\n    if (DEBUG >= 4)\r\n        console.log('!!!!!!!!!!!!!!!! allFiles:', limitDebugOutput4Collection(allFiles));\r\n    if (!allFiles.markdown.get(firstEntryPointPath) && !allFiles.html.get(firstEntryPointPath)) {\r\n        throw new Error(`root file '${firstEntryPointPath}' is supposed to be part of the website`);\r\n    }\r\n    if (0) {\r\n        console.log(`processing root file: ${firstEntryPointPath}...`);\r\n        const specRec = await compileMD(firstEntryPointPath, md, allFiles);\r\n        if (DEBUG >= 10)\r\n            console.log('specRec:', showRec(specRec));\r\n    }\r\n    console.log('processing/loading site files...');\r\n    // now process the HTML, MD, CSS, JS and other 'fixed assets' files:\r\n    //\r\n    // [css, js, image, movie, misc, _]\r\n    for (const type in allFiles) {\r\n        switch (type) {\r\n            case '_':\r\n                continue;\r\n            case 'markdown':\r\n                {\r\n                    const collection = allFiles[type];\r\n                    for (const slot of collection) {\r\n                        const key = slot[0];\r\n                        const entry = slot[1];\r\n                        // as these pages will be rendered to HTML, they'll receive the html extension:\r\n                        entry.destinationRelPath = myCustomPageNamePostprocessor(entry.relativePath.slice(0, entry.relativePath.length - entry.ext.length)) + '.html';\r\n                        if (DEBUG >= 5)\r\n                            console.log('!!!!!!!!!!!!!!!!!!!!!!!! markdown file record:', showRec(entry));\r\n                        const specRec2 = await compileMD(key, md, allFiles);\r\n                        if (DEBUG >= 3)\r\n                            console.log('specRec:', showRec(specRec2));\r\n                        assert.strictEqual(specRec2, entry);\r\n                    }\r\n                }\r\n                continue;\r\n            case 'html':\r\n                {\r\n                    const collection = allFiles[type];\r\n                    for (const slot of collection) {\r\n                        const key = slot[0];\r\n                        const entry = slot[1];\r\n                        // It doesn't matter whether these started out as .htm or .html files: we output them as .html files anyway:\r\n                        entry.destinationRelPath = myCustomPageNamePostprocessor(entry.relativePath.slice(0, entry.relativePath.length - entry.ext.length)) + '.html';\r\n                        if (DEBUG >= 5)\r\n                            console.log('!!!!!!!!!!!!!!!!!!!!!!!! HTML file record:', showRec(entry));\r\n                        const specRec2 = await loadHTML(key, allFiles);\r\n                        if (DEBUG >= 3)\r\n                            console.log('specRec:', showRec(specRec2));\r\n                        assert.strictEqual(specRec2, entry);\r\n                    }\r\n                }\r\n                continue;\r\n            case 'css':\r\n            case 'js':\r\n                {\r\n                    const collection = allFiles[type];\r\n                    for (const slot of collection) {\r\n                        const key = slot[0];\r\n                        const entry = slot[1];\r\n                        entry.destinationRelPath = myCustomPageNamePostprocessor(entry.relativePath.slice(0, entry.relativePath.length - entry.ext.length)) + entry.ext;\r\n                        if (DEBUG >= 5)\r\n                            console.log(`!!!!!!!!!!!!!!!!!!!!!!!! Type [${type}] file record:`, showRec(entry));\r\n                        const specRec2 = await loadFixedAssetTextFile(key, allFiles, collection);\r\n                        if (DEBUG >= 3)\r\n                            console.log('specRec:', showRec(specRec2));\r\n                        assert.strictEqual(specRec2, entry);\r\n                    }\r\n                }\r\n                continue;\r\n            default:\r\n                {\r\n                    const collection = allFiles[type];\r\n                    for (const slot of collection) {\r\n                        const key = slot[0];\r\n                        const entry = slot[1];\r\n                        entry.destinationRelPath = myCustomPageNamePostprocessor(entry.relativePath.slice(0, entry.relativePath.length - entry.ext.length)) + entry.ext;\r\n                        if (DEBUG >= 5)\r\n                            console.log(`!!!!!!!!!!!!!!!!!!!!!!!! Type [${type}] file record:`, showRec(entry));\r\n                        const specRec2 = await loadFixedAssetBinaryFile(key, allFiles, collection);\r\n                        if (DEBUG >= 3)\r\n                            console.log('specRec:', showRec(specRec2));\r\n                        assert.strictEqual(specRec2, entry);\r\n                    }\r\n                }\r\n                continue;\r\n        }\r\n    }\r\n    // now's the time to match the links in the generated content and do some linkage reporting alongside:\r\n    //\r\n    if (DEBUG >= 2)\r\n        console.log('>>>>>>>>>>>>>>>>>>>> allFiles:', limitDebugOutput4Collection(allFiles));\r\n    if (DEBUG >= 1)\r\n        console.log('markdown AST token types:', Object.keys(markdownTokens).sort());\r\n    console.log('tracing site files...');\r\n    // now trace the access graph:\r\n    //\r\n    // [css, js, image, movie, misc, _]\r\n    for (const type in allFiles) {\r\n        switch (type) {\r\n            case '_':\r\n                continue;\r\n            case 'markdown':\r\n                {\r\n                    const collection = allFiles[type];\r\n                    for (const slot of collection) {\r\n                        const key = slot[0];\r\n                        const entry = slot[1];\r\n                        //entry.destinationRelPath\r\n                    }\r\n                }\r\n                continue;\r\n            case 'html':\r\n                {\r\n                    const collection = allFiles[type];\r\n                    for (const slot of collection) {\r\n                        const key = slot[0];\r\n                        const entry = slot[1];\r\n                        // It doesn't matter whether these started out as .htm or .html files: we output them as .html files anyway:\r\n                        //entry.destinationRelPath\r\n                    }\r\n                }\r\n                continue;\r\n            case 'css':\r\n            case 'js':\r\n                {\r\n                    const collection = allFiles[type];\r\n                    for (const slot of collection) {\r\n                        const key = slot[0];\r\n                        const entry = slot[1];\r\n                        //entry.destinationRelPath\r\n                    }\r\n                }\r\n                continue;\r\n            default:\r\n                {\r\n                    const collection = allFiles[type];\r\n                    for (const slot of collection) {\r\n                        const key = slot[0];\r\n                        const entry = slot[1];\r\n                        //entry.destinationRelPath\r\n                    }\r\n                }\r\n                continue;\r\n        }\r\n    }\r\n    console.log('updating/patching site files...');\r\n    // now patch links, etc. in the HTML, MarkDown, CSS and JS files:\r\n    //\r\n    // [css, js, image, movie, misc, _]\r\n    for (const type in allFiles) {\r\n        switch (type) {\r\n            case '_':\r\n                continue;\r\n            case 'markdown':\r\n                {\r\n                    const collection = allFiles[type];\r\n                    for (const slot of collection) {\r\n                        const key = slot[0];\r\n                        const entry = slot[1];\r\n                    }\r\n                }\r\n                continue;\r\n            case 'html':\r\n                {\r\n                    const collection = allFiles[type];\r\n                    for (const slot of collection) {\r\n                        const key = slot[0];\r\n                        const entry = slot[1];\r\n                    }\r\n                }\r\n                continue;\r\n            case 'css':\r\n            case 'js':\r\n                {\r\n                    const collection = allFiles[type];\r\n                    for (const slot of collection) {\r\n                        const key = slot[0];\r\n                        const entry = slot[1];\r\n                    }\r\n                }\r\n                continue;\r\n            default:\r\n                {\r\n                    const collection = allFiles[type];\r\n                    for (const slot of collection) {\r\n                        const key = slot[0];\r\n                        const entry = slot[1];\r\n                    }\r\n                }\r\n                continue;\r\n        }\r\n    }\r\n    console.log('rendering site files\\' content...');\r\n    // render the HTML, MarkDown, CSS and JS files' content:\r\n    //\r\n    // [css, js, image, movie, misc, _]\r\n    for (const type in allFiles) {\r\n        switch (type) {\r\n            case '_':\r\n                continue;\r\n            case 'markdown':\r\n                {\r\n                    const collection = allFiles[type];\r\n                    for (const slot of collection) {\r\n                        const key = slot[0];\r\n                        const entry = slot[1];\r\n                        const specRec2 = await renderMD(key, md, allFiles);\r\n                        if (DEBUG >= 3)\r\n                            console.log('specRec:', showRec(specRec2));\r\n                        assert.strictEqual(specRec2, entry);\r\n                    }\r\n                }\r\n                continue;\r\n            case 'html':\r\n                {\r\n                    const collection = allFiles[type];\r\n                    for (const slot of collection) {\r\n                        const key = slot[0];\r\n                        const entry = slot[1];\r\n                        const specRec2 = await renderHTML(key, allFiles);\r\n                        if (DEBUG >= 3)\r\n                            console.log('specRec:', showRec(specRec2));\r\n                        assert.strictEqual(specRec2, entry);\r\n                    }\r\n                }\r\n                continue;\r\n            case 'css':\r\n            case 'js':\r\n                {\r\n                    const collection = allFiles[type];\r\n                    for (const slot of collection) {\r\n                        const key = slot[0];\r\n                        const entry = slot[1];\r\n                        const specRec2 = await renderFixedAssetTextFile(key, allFiles, collection);\r\n                        if (DEBUG >= 3)\r\n                            console.log('specRec:', showRec(specRec2));\r\n                        assert.strictEqual(specRec2, entry);\r\n                    }\r\n                }\r\n                continue;\r\n            default:\r\n                // we do not 'render' the binary files, right?\r\n                continue;\r\n        }\r\n    }\r\n    //\r\n    // Apply the template? Nah, that must have already happened in the render phase.\r\n    // If we have special 'generated content only' pages, such as the index page to a catalog site,\r\n    // that *still* is done through a (possibly empty, except for some metadata perhaps) `index.html`\r\n    // or README.md or other *content* file: the custom code can decide which bit of the template\r\n    // collective to apply to each page, so that would then apply a 'overview/index/landing' page\r\n    // template to such a (hypothetical) page.\r\n    //\r\n    // Hence we come to the conclusion now: every page being written is written by a (possibly empty)\r\n    // content page. If the content page is absent, the page simply is NOT generated.\r\n    //\r\n    // Meanwhile, the custom code decides which template file((s) are applied to each content item\r\n    // in the allFiles list.\r\n    //\r\n    // ---\r\n    //\r\n    // Yes, this means we'll have content pages for the 404 and other landing pages too. If they are\r\n    // absent, we do not have those landing pages. Simple as that.\r\n    //\r\n    // output the files into the destination directory\r\n    console.log(`buildWebsite: command: ${command || '<no-command>'}, opts: ${JSON.stringify(opts, null, 2)}`);\r\n    // now write the CSS, HTML, JS and other files:\r\n    console.log(`Writing all processed & collected files to the website destination directory '${config.docTreeBasedir}'...`);\r\n    for (const type in allFiles) {\r\n        switch (type) {\r\n            case '_':\r\n                continue;\r\n            case 'html':\r\n            case 'markdown':\r\n                {\r\n                    const collection = allFiles[type];\r\n                    for (const slot of collection) {\r\n                        const key = slot[0];\r\n                        const entry = slot[1];\r\n                        const destFilePath = unixify(path.join(opts.output, entry.destinationRelPath));\r\n                        if (DEBUG >= 5)\r\n                            console.log(`!!!!!!!!!!!!!!!!!!!!!!!! Type [${type}] file record: copy '${entry.path}' --> '${destFilePath}'`);\r\n                        filterHtmlHeadAfterMetadataExtraction(entry);\r\n                        let title = entry.metaData?.docTitle || entry.metaData?.frontMatter?.title || path.basename(entry.relativePath, entry.ext);\r\n                        console.log(\"TITLE extraction:\", { meta: entry.metaData, docTitle: entry.metaData?.docTitle, fmTitle: entry.metaData?.frontMatter?.title, pathTitle: path.basename(entry.relativePath, entry.ext), title });\r\n                        if (title && title.trim()) {\r\n                            title = `<title>${title}</title>`;\r\n                        }\r\n                        else {\r\n                            title = '';\r\n                        }\r\n                        const htmlHead = entry.HtmlHead;\r\n                        const htmlBody = entry.HtmlBody;\r\n                        const originalPath = entry.relativePath;\r\n                        const content = `\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    ${title}\n    ${htmlHead.html()}\n  </head>\n  <body>\n    <pre>${JSON.stringify(entry.metaData, null, 2)}</pre>\n\n    ${htmlBody.html()}\n\n    <footer>\n      © 2020 Qiqqa Contributors ::\n      <a href=\"https://github.com/GerHobbelt/qiqqa-open-source/blob/docs-src/${originalPath}\">Edit this page on GitHub</a>\n    </footer>\n  </body>\n</html>\n`.trimLeft();\r\n                        const dstDir = unixify(path.dirname(destFilePath));\r\n                        fs.mkdirSync(dstDir, { recursive: true });\r\n                        fs.writeFileSync(destFilePath, content, 'utf8');\r\n                        //el.RenderedHtmlContent = content;\r\n                    }\r\n                }\r\n                continue;\r\n            case 'css':\r\n            case 'js':\r\n            default:\r\n                {\r\n                    const collection = allFiles[type];\r\n                    for (const slot of collection) {\r\n                        const key = slot[0];\r\n                        const entry = slot[1];\r\n                        const destFilePath = unixify(path.join(opts.output, entry.destinationRelPath));\r\n                        if (DEBUG >= 5)\r\n                            console.log(`!!!!!!!!!!!!!!!!!!!!!!!! Type [${type}] file record: copy '${entry.path}' --> '${destFilePath}'`);\r\n                        const dstDir = unixify(path.dirname(destFilePath));\r\n                        fs.mkdirSync(dstDir, { recursive: true });\r\n                        fs.copyFileSync(entry.path, destFilePath, fs.constants.COPYFILE_FICLONE);\r\n                    }\r\n                }\r\n                continue;\r\n        }\r\n    }\r\n    if (DEBUG >= 1)\r\n        console.log(`Copying the extra files to the website destination directory '${config.docTreeBasedir}'...`);\r\n    // add a couple of important files, which are probably not included in the file list yet:\r\n    ['CNAME', '.nojekyll'].forEach((f) => {\r\n        const p = unixify(path.resolve(path.join(config.docTreeBasedir, f)));\r\n        if (fs.existsSync(p)) {\r\n            const destFilePath = unixify(path.join(opts.output, f));\r\n            const dstDir = unixify(path.dirname(destFilePath));\r\n            fs.mkdirSync(dstDir, { recursive: true });\r\n            fs.copyFileSync(p, destFilePath, fs.constants.COPYFILE_FICLONE);\r\n        }\r\n    });\r\n}\r\n// compile the MarkDown files to a token stream. Belay *rendering* until all files, including the HTML files out there,\r\n// have been processed as we will be patching some tokens in there before the end is neigh!\r\nasync function compileMD(mdPath, md, allFiles) {\r\n    if (DEBUG >= 3)\r\n        console.log(`processing file: ${mdPath}...`);\r\n    return new Promise((resolve, reject) => {\r\n        fs.readFile(mdPath, {\r\n            encoding: 'utf8'\r\n        }, async (err, data) => {\r\n            if (err) {\r\n                reject(new Error(`ERROR: read error ${err} for file ${mdPath}`));\r\n                return;\r\n            }\r\n            const env = {\r\n                getIncludeRootDir: null,\r\n                title: null\r\n            };\r\n            if (DEBUG >= 8)\r\n                console.log(`source: length: ${data.length}`);\r\n            // augment the md instance for use with the markdown_it_include plugin:\r\n            env.getIncludeRootDir = function (options, state, startLine, endLine) {\r\n                if (DEBUG >= 6)\r\n                    console.log('##### include root dir is today:', { dir: path.dirname(mdPath) });\r\n                return path.dirname(mdPath);\r\n            };\r\n            // let content = md.render(data); --> .parse + .renderer.render\r\n            //\r\n            // .parse --> new state + process: return tokens\r\n            // let tokens = md.parse(data, env)\r\n            const state = new md.core.State(data, md, env);\r\n            md.core.process(state);\r\n            const tokens = state.tokens;\r\n            const metadata = {\r\n                frontMatter: null,\r\n                docTitle: null\r\n            };\r\n            if (DEBUG >= 10)\r\n                console.log('tokens:\\n', limitDebugOutput(JSON.stringify(cleanTokensForDisplay(tokens), null, 2)));\r\n            const typeMap = new Set();\r\n            traverseTokens(tokens, (t, idx, arr, depth) => {\r\n                typeMap.add(t.type);\r\n                markdownTokens[t.type] = true;\r\n                if (t.type === 'front_matter') {\r\n                    metadata.frontMatter = t.meta;\r\n                }\r\n            });\r\n            if (DEBUG >= 4)\r\n                console.log('token types:', typeMap);\r\n            if (0) {\r\n                let position = 0;\r\n                let prevToken = null;\r\n                traverseTokens(tokens, (t, idx, arr, depth) => {\r\n                    if (!Number.isFinite(t.position)) {\r\n                        console.error('erroneous token position:', t);\r\n                        return;\r\n                    }\r\n                    if (!Number.isFinite(t.size)) {\r\n                        console.error('erroneous token size:', t);\r\n                        return;\r\n                    }\r\n                    if (t.position >= position) {\r\n                        position = t.position;\r\n                    }\r\n                    else {\r\n                        console.warn('token position is dropping back / reversing:', { position, t, prevToken });\r\n                    }\r\n                    prevToken = t;\r\n                });\r\n            }\r\n            if (!env.title) {\r\n                metadata.docTitle = env.title;\r\n            }\r\n            // update the file record:\r\n            const el = allFiles.markdown.get(mdPath);\r\n            if (DEBUG >= 3)\r\n                console.log('update the file record:', { mdPath, el: showRec(el) });\r\n            el.mdState = state;\r\n            el.mdEnv = env;\r\n            el.mdTypeMap = typeMap;\r\n            el.metaData = metadata;\r\n            resolve(el);\r\n        });\r\n    });\r\n}\r\n// compile the MarkDown files to a token stream. Belay *rendering* until all files, including the HTML files out there,\r\n// have been processed as we will be patching some tokens in there before the end is neigh!\r\nasync function renderMD(mdPath, md, allFiles) {\r\n    if (DEBUG >= 3)\r\n        console.log(`processing file: ${mdPath}...`);\r\n    return new Promise((resolve, reject) => {\r\n        const el = allFiles.markdown.get(mdPath);\r\n        const state = el.mdState;\r\n        const env = el.mdEnv;\r\n        const typeMap = el.mdTypeMap;\r\n        const metadata = el.metaData;\r\n        const tokens = state.tokens;\r\n        const content = md.renderer.render(tokens, md.options, env);\r\n        if (DEBUG >= 4)\r\n            console.log('output:\\n', limitDebugOutput(content));\r\n        const $doc = cheerio.load('<html><head><body>\\n' + content);\r\n        const bodyEl = $doc('body'); // implicitly created\r\n        const headEl = $doc('head');\r\n        if (DEBUG >= 5)\r\n            console.log('MARKDOWN:\\n', showRec({ html: $doc, body: bodyEl.html(), head: headEl.html() }));\r\n        // update the file record:\r\n        if (DEBUG >= 3)\r\n            console.log('update the file record:', { mdPath, el: showRec(el) });\r\n        el.HtmlDocument = $doc;\r\n        el.HtmlBody = bodyEl;\r\n        el.HtmlHead = headEl;\r\n        el.metaData = metadata;\r\n        resolve(el);\r\n    });\r\n}\r\n// compile the HTML files to a DOM token stream. Belay *rendering* until all files, including the MarkDown files out there,\r\n// have been processed as we will be patching some DOM nodes in there before the end is neigh!\r\nasync function loadHTML(htmlPath, allFiles) {\r\n    if (DEBUG >= 3)\r\n        console.log(`processing file: ${htmlPath}...`);\r\n    return new Promise((resolve, reject) => {\r\n        fs.readFile(htmlPath, {\r\n            encoding: 'utf8'\r\n        }, async (err, data) => {\r\n            if (err) {\r\n                reject(new Error(`ERROR: read error ${err} for file ${htmlPath}`));\r\n                return;\r\n            }\r\n            if (DEBUG >= 8)\r\n                console.log(`source: length: ${data.length}`);\r\n            const $doc = cheerio.load(data);\r\n            const bodyEl = $doc('body'); // implicitly created\r\n            const headEl = $doc('head');\r\n            const titleEl = headEl.find('title');\r\n            const title = titleEl.html();\r\n            if (DEBUG >= 3)\r\n                console.log('HTML:\\n', showRec({ html: $doc, body: bodyEl.html(), head: headEl.html() }));\r\n            // update the file record:\r\n            const el = allFiles.html.get(htmlPath);\r\n            el.HtmlDocument = $doc;\r\n            el.HtmlBody = bodyEl;\r\n            el.HtmlHead = headEl;\r\n            el.metaData = {\r\n                docTitle: title\r\n            };\r\n            resolve(el);\r\n        });\r\n    });\r\n}\r\n// remove any HTML DOM elements from the <head> section which would otherwise collide with the standard metadata.\r\nfunction filterHtmlHeadAfterMetadataExtraction(entry) {\r\n    const $doc = entry.HtmlDocument;\r\n    const headEl = $doc('head');\r\n    const titleEl = headEl.find('title');\r\n    titleEl?.remove();\r\n}\r\n// compile the HTML files to a DOM token stream. Belay *rendering* until all files, including the MarkDown files out there,\r\n// have been processed as we will be patching some DOM nodes in there before the end is neigh!\r\nasync function renderHTML(htmlPath, allFiles) {\r\n    if (DEBUG >= 3)\r\n        console.log(`processing file: ${htmlPath}...`);\r\n    return new Promise((resolve, reject) => {\r\n        const el = allFiles.html.get(htmlPath);\r\n        const $doc = el.HtmlDocument;\r\n        const bodyEl = el.HtmlBody;\r\n        const headEl = el.htmlHead;\r\n        if (DEBUG >= 3)\r\n            console.log('HTML:\\n', showRec({ html: $doc, body: bodyEl.html(), head: headEl.html() }));\r\n        // update the file record:\r\n        resolve(el);\r\n    });\r\n}\r\nasync function loadFixedAssetTextFile(filePath, allFiles, collection) {\r\n    if (DEBUG >= 3)\r\n        console.log(`processing file: ${filePath}...`);\r\n    return new Promise((resolve, reject) => {\r\n        fs.readFile(filePath, {\r\n            encoding: 'utf8'\r\n        }, async (err, data) => {\r\n            if (err) {\r\n                reject(new Error(`ERROR: read error ${err} for file ${filePath}`));\r\n                return;\r\n            }\r\n            if (DEBUG >= 8)\r\n                console.log(`source: length: ${data.length}`);\r\n            // update the file record:\r\n            const el = collection.get(filePath);\r\n            el.RawContent = data;\r\n            resolve(el);\r\n        });\r\n    });\r\n}\r\nasync function renderFixedAssetTextFile(filePath, allFiles, collection) {\r\n    if (DEBUG >= 3)\r\n        console.log(`processing file: ${filePath}...`);\r\n    return new Promise((resolve, reject) => {\r\n        // update the file record:\r\n        const el = collection.get(filePath);\r\n        //el.RawContent = data;\r\n        resolve(el);\r\n    });\r\n}\r\nasync function loadFixedAssetBinaryFile(filePath, allFiles, collection) {\r\n    if (DEBUG >= 3)\r\n        console.log(`processing file: ${filePath}...`);\r\n    // We DO NOT load binary files as that would only clutter the nodeJS heap memory and cause out-of-memory exceptions.\r\n    return new Promise((resolve, reject) => {\r\n        const x = fs.existsSync(filePath);\r\n        if (!x) {\r\n            reject(new Error(`ERROR: file '${filePath}' does not exist.`));\r\n            return;\r\n        }\r\n        //if (DEBUG >= 8) console.log(`source: length: ${data.length}`);\r\n        // update the file record:\r\n        const el = collection.get(filePath);\r\n        //el.RawContent = data;\r\n        el.contentIsBinary = true;\r\n        resolve(el);\r\n    });\r\n}\r\nfunction cleanTokensForDisplay(tokens) {\r\n    const rv = [];\r\n    for (const i in tokens) {\r\n        let t = tokens[i];\r\n        t = cleanSingleTokenForDisplay(t);\r\n        if (t.children) {\r\n            t.children = cleanTokensForDisplay(t.children);\r\n        }\r\n        rv[i] = t;\r\n    }\r\n    return rv;\r\n}\r\nfunction cleanSingleTokenForDisplay(token) {\r\n    const rv = {};\r\n    for (const attr in token) {\r\n        if (token[attr] !== '' && token[attr] != null) {\r\n            rv[attr] = token[attr];\r\n        }\r\n    }\r\n    return rv;\r\n}\r\n// https://vuepress.vuejs.org/plugin/life-cycle.html#generated\r\nasync function mdGenerated(pagePaths) {\r\n    // cp docs-src/.nojekyll docs/ && cp docs-src/CNAME docs/\r\n    console.error('async generated HIT');\r\n    fs.writeFileSync(absDstPath('CNAME'), 'qiqqa.org\\n', 'utf8');\r\n    fs.writeFileSync(absDstPath('.nojekyll'), '');\r\n}\r\nfunction traverseTokens(tokens, cb, depth) {\r\n    depth = depth || 0;\r\n    for (let i = 0, len = tokens.length; i < len; i++) {\r\n        const t = tokens[i];\r\n        cb(t, i, tokens, depth);\r\n        if (t.children) {\r\n            traverseTokens(t.children, cb, depth + 1);\r\n        }\r\n    }\r\n}\r\n// demo()\r\n//   .then(() => {\r\n//      console.log('done');\r\n//   })\r\n//   .catch(err => {\r\n//     console.error('error:', err);\r\n//   });\r\n//# sourceMappingURL=index.js.map"],"names":[],"mappings":"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"}